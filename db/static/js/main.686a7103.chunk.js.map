{"version":3,"sources":["store/initialState.js","store/insulinUnits.js","utils/doStringMath.js","utils/makeNewState.js","utils/makeStateSetters.js","utils/makeOnChanged.js","utils/makeOnBlur.js","InsulinUnits.js","store/proportionateCarbs.js","ProportionateCarbs.js","store/settings.js","store/store.js","App.js","reportWebVitals.js","index.js"],"names":["initialState","settings","consumedCarbs","currentBg","minimumUnit","carbsPerUnit","bgPerUnit","targetBg","unitAdjustmentPercentage","carbsPerColumnWeight","columnWeight","totalPacketWeight","totalPieces","consumedPieces","minimumCarbs","insulinUnits","unitAdjustmentRatio","bgDistance","bgUnits","carbUnits","totalUnits","adjustedTotalUnits","roundedAdjustedTotalUnits","proportionateCarbs","carbRatio","weightRatio","consumedRatio","roundedConsumedCarbs","insulinUnitsSlice","createSlice","name","reducers","allInsulinUnitsChanged","state","action","stateUpdate","Object","assign","Math","round","doUnitMath","payload","actions","doStringMath","str","String","replace","evaluate","makeNewState","update","merged","key","makeStateSetters","defaults","values","setters","useState","makeOnChanged","dispatch","event","value","target","err","makeOnBlur","InsulinUnits","useSelector","onChanged","useDispatch","onBlur","className","TextField","id","label","onChange","bind","proportionateCarbsSlice","allProportionateCarbsChanged","ProportionateCarbs","settingsSlice","configureStore","reducer","settingsReducer","insulinUnitsReducer","proportionateCarbsReducer","App","store","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.686a7103.chunk.js","sourcesContent":["export const initialState = {\r\n  settings: {\r\n    consumedCarbs: 0,\r\n    currentBg: 5,\r\n    minimumUnit: 0.5,\r\n    carbsPerUnit: 9,\r\n    bgPerUnit: 2.9,\r\n    targetBg: 5,\r\n    unitAdjustmentPercentage: 0,\r\n    carbsPerColumnWeight: 0,\r\n    columnWeight: 100,\r\n    totalPacketWeight: 100,\r\n    totalPieces: 8,\r\n    consumedPieces: 8,\r\n    minimumCarbs: 1\r\n  },\r\n  insulinUnits: {\r\n    consumedCarbs: null,\r\n    currentBg: null,\r\n    unitAdjustmentPercentage: null,\r\n    minimumUnit: null,\r\n    carbsPerUnit: null,\r\n    bgPerUnit: null,\r\n    targetBg: null,\r\n    unitAdjustmentRatio: 0,\r\n    bgDistance: 0,\r\n    bgUnits: 0,\r\n    carbUnits: 0,\r\n    totalUnits: 0,\r\n    adjustedTotalUnits: 0,\r\n    roundedAdjustedTotalUnits: 0\r\n  },\r\n  proportionateCarbs: {\r\n    carbsPerColumnWeight: null,\r\n    columnWeight: null,\r\n    totalPacketWeight: null,\r\n    totalPieces: null,\r\n    consumedPieces: null,\r\n    minimumCarbs: null,\r\n    carbRatio: 0,\r\n    weightRatio: 0,\r\n    consumedRatio: 0,\r\n    consumedCarbs: 0,\r\n    roundedConsumedCarbs: 0\r\n  }\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { initialState } from './initialState'\r\n\r\nconst doUnitMath = (state, stateUpdate) => {\r\n  Object.assign(state, stateUpdate)\r\n\r\n  const consumedCarbs = state.consumedCarbs\r\n  const currentBg = state.currentBg\r\n  const unitAdjustmentPercentage = state.unitAdjustmentPercentage\r\n  const targetBg = state.targetBg\r\n  const carbsPerUnit = state.carbsPerUnit\r\n  const bgPerUnit = state.bgPerUnit\r\n  const minimumUnit = state.minimumUnit\r\n\r\n  const unitAdjustmentRatio = 1 + (unitAdjustmentPercentage / 100)\r\n  const bgDistance = (currentBg - targetBg)\r\n  const bgUnits = bgPerUnit ? (bgDistance / bgPerUnit) : 0\r\n  const carbUnits = carbsPerUnit ? (consumedCarbs / carbsPerUnit) : 0\r\n\r\n  const totalUnits = (bgUnits + carbUnits)\r\n  const adjustedTotalUnits = (totalUnits * unitAdjustmentRatio)\r\n  const roundedAdjustedTotalUnits = Math.round(adjustedTotalUnits / minimumUnit) * minimumUnit\r\n\r\n  Object.assign(state, {\r\n    consumedCarbs,\r\n    currentBg,\r\n    unitAdjustmentPercentage,\r\n    targetBg,\r\n    carbsPerUnit,\r\n    bgPerUnit,\r\n    unitAdjustmentRatio,\r\n    bgDistance,\r\n    bgUnits,\r\n    carbUnits,\r\n    totalUnits,\r\n    adjustedTotalUnits,\r\n    roundedAdjustedTotalUnits\r\n  })\r\n\r\n}\r\n\r\nconst insulinUnitsSlice = createSlice({\r\n  name: 'insulinUnits',\r\n  initialState: initialState.insulinUnits,\r\n  reducers: {\r\n    allInsulinUnitsChanged(state, action) {\r\n      doUnitMath(state, action.payload)\r\n    }\r\n  }\r\n})\r\n\r\nexport const {\r\n  allInsulinUnitsChanged\r\n} = insulinUnitsSlice.actions\r\n\r\nexport default insulinUnitsSlice.reducer\r\n","import { evaluate } from 'mathjs'\r\n\r\nexport default function doStringMath(str) {\r\n  str = String(str)\r\n  str = str.replace(/x/i, '*')\r\n  return evaluate(str)\r\n}\r\n","import doStringMath from './doStringMath';\r\n\r\nexport default function makeNewState(state, settings, update = {}) {\r\n  const merged = {}\r\n  for (const key in update) {\r\n    update[key] = doStringMath(update[key])\r\n  }\r\n  for (const key in state) {\r\n    merged[key] = update[key] ?? state[key] ?? settings[key]\r\n  }\r\n  return merged\r\n}\r\n","import { useState } from \"react\"\r\n\r\nexport default function makeStateSetters(defaults) {\r\n  const values = {}\r\n  const setters = {}\r\n  for (const key in defaults) {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    [ values[key], setters[key] ] = useState(defaults[key])\r\n  }\r\n  return [values, setters]\r\n}\r\n","import makeNewState from \"./makeNewState\"\r\n\r\nexport default function makeOnChanged(state, settings, setters, dispatch, action) {\r\n  return (name, event) => {\r\n    const value = event.target.value\r\n    setters[name](value)\r\n    try {\r\n      dispatch(\r\n        action(makeNewState(\r\n          state,\r\n          settings,\r\n          {\r\n            [name]: value || settings[name]\r\n          }\r\n        ))\r\n      )\r\n    } catch (err) {}\r\n  }\r\n}\r\n","export default function makeOnBlur(setters, defaults) {\r\n  return (name, event) => {\r\n    const value = event.target.value\r\n    if (value !== \"\") return;\r\n    setters[name](defaults[name])\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { TextField } from '@material-ui/core';\r\nimport { allInsulinUnitsChanged } from './store/insulinUnits'\r\nimport makeNewState from './utils/makeNewState'\r\nimport makeStateSetters from './utils/makeStateSetters'\r\nimport makeOnChanged from './utils/makeOnChanged';\r\nimport makeOnBlur from './utils/makeOnBlur'\r\n\r\nexport const InsulinUnits = () => {\r\n  const state = useSelector(state => state.insulinUnits)\r\n  const settings = useSelector(state => state.settings)\r\n  const defaults = makeNewState(state, settings);\r\n  const [values, setters] = makeStateSetters(defaults)\r\n  const dispatch = useDispatch()\r\n  const onChanged = makeOnChanged(state, settings, setters, dispatch, allInsulinUnitsChanged)\r\n  const onBlur = makeOnBlur(setters, defaults)\r\n\r\n  return (\r\n    <section className=\"insulinunits\">\r\n\r\n      <div className=\"insulinunits__output\">\r\n        <div>Insulin calculator</div>\r\n        {state.roundedAdjustedTotalUnits||0}units\r\n      </div>\r\n\r\n      <div className=\"insulinunits_input\">\r\n\r\n        <div className=\"insulinunits__input__consumedcarbs\">\r\n          <TextField id=\"standard-basic\" label=\"Carbs (g)\"\r\n            onChange={onChanged.bind(this, 'consumedCarbs')}\r\n            onBlur={onBlur.bind(this, 'consumedCarbs')}\r\n            value={values.consumedCarbs}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"insulinunits__input__currentbg\">\r\n          <TextField id=\"standard-basic\" label=\"Current Bg (mmol/l)\"\r\n            onChange={onChanged.bind(this, 'currentBg')}\r\n            onBlur={onBlur.bind(this, 'currentBg')}\r\n            value={values.currentBg}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"insulinunits__input__unitadjustmentpercentage\">\r\n          <TextField id=\"standard-basic\" label=\"Adjustment %\"\r\n            onChange={onChanged.bind(this, 'unitAdjustmentPercentage')}\r\n            onBlur={onBlur.bind(this, 'unitAdjustmentPercentage')}\r\n            value={values.unitAdjustmentPercentage}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"insulinunits__input__carbsperunit\">\r\n          <TextField id=\"standard-basic\" label=\"Carbs per unit (g)\"\r\n            onChange={onChanged.bind(this, 'carbsPerUnit')}\r\n            onBlur={onBlur.bind(this, 'carbsPerUnit')}\r\n            value={values.carbsPerUnit}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"insulinunits__input__bgperunit\">\r\n          <TextField id=\"standard-basic\" label=\"Bg per unit (mmol/l)\"\r\n            onChange={onChanged.bind(this, 'bgPerUnit')}\r\n            onBlur={onBlur.bind(this, 'bgPerUnit')}\r\n            value={values.bgPerUnit}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"insulinunits__input__targetbg\">\r\n          <TextField id=\"standard-basic\" label=\"Target Bg (mmol/l)\"\r\n            onChange={onChanged.bind(this, 'targetBg')}\r\n            onBlur={onBlur.bind(this, 'targetBg')}\r\n            value={values.targetBg}\r\n          />\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </section>\r\n  )\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { initialState } from './initialState'\r\n\r\nconst doUnitMath = (state, stateUpdate) => {\r\n  Object.assign(state, stateUpdate)\r\n\r\n  const carbsPerColumnWeight = state.carbsPerColumnWeight\r\n  const columnWeight = state.columnWeight\r\n  const totalPacketWeight = state.totalPacketWeight\r\n  const totalPieces = state.totalPieces\r\n  const consumedPieces = state.consumedPieces\r\n  const minimumCarbs = state.minimumCarbs\r\n\r\n  const carbRatio = columnWeight ? (carbsPerColumnWeight / columnWeight) : 0\r\n  const weightRatio = columnWeight ? (totalPacketWeight / columnWeight) : 0\r\n  const consumedRatio = totalPieces ? (consumedPieces / totalPieces) : 0\r\n  const consumedCarbs = (carbRatio * weightRatio * consumedRatio * totalPacketWeight);\r\n\r\n  const roundedConsumedCarbs = Math.round(consumedCarbs / minimumCarbs) * minimumCarbs\r\n\r\n  Object.assign(state, {\r\n    carbsPerColumnWeight,\r\n    columnWeight,\r\n    totalPacketWeight,\r\n    totalPieces,\r\n    consumedPieces,\r\n    minimumCarbs,\r\n    carbRatio,\r\n    weightRatio,\r\n    consumedRatio,\r\n    consumedCarbs,\r\n    roundedConsumedCarbs\r\n  })\r\n\r\n}\r\n\r\nconst proportionateCarbsSlice = createSlice({\r\n  name: 'proportionateCarbs',\r\n  initialState: initialState.proportionateCarbs,\r\n  reducers: {\r\n    allProportionateCarbsChanged(state, action) {\r\n      doUnitMath(state, action.payload)\r\n    }\r\n  }\r\n})\r\n\r\nexport const {\r\n  allProportionateCarbsChanged\r\n} = proportionateCarbsSlice.actions\r\n\r\nexport default proportionateCarbsSlice.reducer\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { TextField } from '@material-ui/core'\r\nimport { allProportionateCarbsChanged } from './store/proportionateCarbs'\r\nimport makeNewState from './utils/makeNewState'\r\nimport makeStateSetters from './utils/makeStateSetters'\r\nimport makeOnChanged from './utils/makeOnChanged';\r\nimport makeOnBlur from './utils/makeOnBlur'\r\n\r\nexport const ProportionateCarbs = () => {\r\n  const state = useSelector(state => state.proportionateCarbs)\r\n  const settings = useSelector(state => state.settings)\r\n  const defaults = makeNewState(state, settings)\r\n  const [values, setters] = makeStateSetters(defaults)\r\n  const dispatch = useDispatch()\r\n  const onChanged = makeOnChanged(state, settings, setters, dispatch, allProportionateCarbsChanged)\r\n  const onBlur = makeOnBlur(setters, defaults)\r\n\r\n  return (\r\n    <section className=\"proportionatecarbs\">\r\n\r\n      <div className=\"proportionatecarbs__output\">\r\n        <div>Consumed carbohydrates</div>\r\n        {state.roundedConsumedCarbs||0}g\r\n      </div>\r\n\r\n      <div className=\"proportionatecarbs_input\">\r\n\r\n        <div className=\"proportionatecarbs__input__columnweight\">\r\n          <TextField id=\"standard-basic\" label=\"Per weight (g)\"\r\n            onChange={onChanged.bind(this, 'columnWeight')}\r\n            onBlur={onBlur.bind(this, 'columnWeight')}\r\n            value={values.columnWeight}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"proportionatecarbs__input__carbspercolumnweight\">\r\n          <TextField id=\"standard-basic\" label=\"Carbs per weight (g)\"\r\n            onChange={onChanged.bind(this, 'carbsPerColumnWeight')}\r\n            onBlur={onBlur.bind(this, 'carbsPerColumnWeight')}\r\n            value={values.carbsPerColumnWeight}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"proportionatecarbs__input__totalpacketweight\">\r\n          <TextField id=\"standard-basic\" label=\"Total weight (g)\"\r\n            onChange={onChanged.bind(this, 'totalPacketWeight')}\r\n            onBlur={onBlur.bind(this, 'totalPacketWeight')}\r\n            value={values.totalPacketWeight}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"proportionatecarbs__input__totalpieces\">\r\n          <TextField id=\"standard-basic\" label=\"Pieces\"\r\n            onChange={onChanged.bind(this, 'totalPieces')}\r\n            onBlur={onBlur.bind(this, 'totalPieces')}\r\n            value={values.totalPieces}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"proportionatecarbs__input__consumedpieces\">\r\n          <TextField id=\"standard-basic\" label=\"Consumed pieces\"\r\n            onChange={onChanged.bind(this, 'consumedPieces')}\r\n            onBlur={onBlur.bind(this, 'consumedPieces')}\r\n            value={values.consumedPieces}\r\n          />\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </section>\r\n  )\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { initialState } from './initialState'\r\n\r\nconst settingsSlice = createSlice({\r\n  name: 'settings',\r\n  initialState: initialState.settings,\r\n  reducers: {}\r\n})\r\n\r\nexport default settingsSlice.reducer\r\n","import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport settingsReducer from './settings'\r\nimport insulinUnitsReducer from './insulinUnits'\r\nimport proportionateCarbsReducer from './proportionateCarbs'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    settings: settingsReducer,\r\n    insulinUnits: insulinUnitsReducer,\r\n    proportionateCarbs: proportionateCarbsReducer\r\n  }\r\n})\r\n","import './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport { InsulinUnits } from './InsulinUnits';\nimport { ProportionateCarbs } from './ProportionateCarbs';\nimport store from './store/store'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <div className=\"App\">\n          <Switch>\n            <Route path=\"/insulinunits\">\n              <InsulinUnits />\n            </Route>\n            <Route path=\"/proportionatecarbs\">\n              <ProportionateCarbs />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}