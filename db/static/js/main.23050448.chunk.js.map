{"version":3,"sources":["lang/langs.js","lang/en.js","store/initialState.js","store/settings.js","store/view.js","utils/round.js","store/insulinUnits.js","utils/min.js","utils/doStringMath.js","utils/mergeStates.js","utils/resetStates.js","utils/makeOnFocusSelect.js","utils/makeOnChanged.js","utils/makeOnBlur.js","utils/styles.js","InsulinUnits.js","utils/makeOnFocusGotoEndOrSelectZero.js","store/proportionateCarbs.js","ProportionateCarbs.js","Settings.js","Warning.js","About.js","App.js","reportWebVitals.js","store/store.js","manifest.js","index.js"],"names":["langs","en","insulinUnitsTitle","proportionateCarbsTitle","proportionateCarbsCarbRatioTitle","proportionateCarbsAddButtonText","proportionateCarbsCarbsPerWeightLabelText","proportionateCarbsCarbsPerWeightInfoText","proportionateCarbsColumnWeightLabelText","proportionateCarbsColumnWeightInfoText","proportionateCarbsAmountConsumedTitle","proportionateCarbsTotalWeightLabelText","proportionateCarbsTotalWeightInfoText","proportionateCarbsPortionRatioLabelText","proportionateCarbsPortionRatioInfoText","insulinUnitsAddProportionateCarbsButtonText","insulinUnitsConsumedCarbsLabelText","insulinUnitsConsumedCarbsInfoText","insulinUnitsCurrentBgLabelText","insulinUnitsCurrentBgInfoText","insulinUnitsUnitAdjustmentPercentageLabelText","insulinUnitsUnitAdjustmentPercentageInfoText","insulinUnitsPersonalisedSettingsButtonText","insulinUnitsTargetBgLabelText","insulinUnitsTargetBgInfoText","insulinUnitsCarbsPerUnitLabelText","insulinUnitsCarbsPerUnitInfoText","insulinUnitsBgPerUnitLabelText","insulinUnitsBgPerUnitInfoText","addUI","settings","output","key","startsWith","defaultSettings","version","needsUpdating","consumedCarbs","currentBg","minimumUnits","carbsPerUnit","bgPerUnit","targetBg","unitAdjustmentPercentage","carbsPerColumnWeight","columnWeight","totalPacketWeight","portionRatio","minimumCarbs","lang","savedSettings","JSON","parse","localStorage","getItem","initialState","view","title","insulinUnits","ui_consumedCarbs","ui_currentBg","ui_unitAdjustmentPercentage","ui_minimumUnits","ui_carbsPerUnit","ui_bgPerUnit","ui_targetBg","ui_unitAdjustmentRatio","bgDistance","bgUnits","carbUnits","totalUnits","adjustedTotalUnits","roundedAdjustedTotalUnits","proportionateCarbs","ui_carbsPerColumnWeight","ui_columnWeight","ui_totalPacketWeight","ui_portionRatio","ui_minimumCarbs","carbRatio","totalPacketCarbs","roundedConsumedCarbs","settingsSlice","createSlice","name","reducers","allSettingsChanged","state","action","Object","assign","payload","setItem","stringify","actions","viewSlice","titleChanged","round","value","precision","Math","valueAsString","String","includes","precisionAsString","precisionAfterDecimal","slice","indexOf","truncatedString","length","parseFloat","insulinUnitsSlice","allInsulinUnitsChanged","stateUpdate","unitAdjustmentRatio","min","doUnitMath","doStringMath","str","replace","evaluate","mergeStates","update","merged","err","fromKey","resetStates","makeOnFocusSelect","defaults","dispatch","noui","event","target","select","makeOnChanged","makeOnBlur","outputContainer","paddingBottom","topButton","marginTop","width","rawStyles","addCarbs","display","padding","minWidth","makeStyles","InsulinUnits","useSelector","values","useDispatch","onKeyUp","keyCode","blur","onFocusGotoEndOrSelectZero","setSelectionRange","len","setTimeout","scrollTop","makeOnFocusGotoEndOrSelectZero","onFocusSelect","onChanged","onBlur","useEffect","useState","showConsumedCarbs","setShowConsumedCarbs","showCurrentBG","setShowCurrentBG","showUnitAdjustmentPercentage","setShowUnitAdjustmentPercentage","showTargetBg","setShowTargetBg","showCarbsPerUnit","setShowCarbsPerUnit","showBgPerUnit","setShowBgPerUnit","Fragment","className","style","Typography","variant","noWrap","Button","onClick","Autorenew","TextField","label","Info","Alert","severity","onClose","onFocus","bind","onChange","InputProps","startAdornment","InputAdornment","position","Restaurant","endAdornment","component","Link","to","ShowChart","FitnessCenter","Accordion","AccordionSummary","expandIcon","ExpandMore","aria-controls","id","AccordionDetails","proportionateCarbsSlice","allProportionateCarbsChanged","ProportionateCarbs","insulinUnitsState","showCarbsPerWeight","setShowCarbsPerWeight","showColumnWeight","setShowColumnWeight","showTotalWeight","setShowTotalWeight","showPortionRatio","setShowPortionRatio","MenuOpen","Maximize","Cake","InputLabel","htmlFor","Select","native","inputProps","DataUsage","aria-label","carbs","Add","Settings","helperText","Warning","About","href","Boolean","drawerWidth","useStyles","theme","root","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","menuButton","marginLeft","marginRight","hide","flexShrink","whiteSpace","drawerOpen","enteringScreen","drawerClose","overflowX","spacing","toolbar","alignItems","justifyContent","mixins","content","flexGrow","ScrollToTopConnected","withRouter","history","unlisten","listen","window","scrollTo","App","classes","useTheme","React","open","setOpen","handleDrawerClose","a","fetch","response","json","manifest","console","log","AppBar","clsx","appBarShift","Toolbar","path","IconButton","color","edge","Menu","Drawer","paper","direction","ChevronRight","ChevronLeft","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","disabled","serviceWorkerRegistration","active","postMessage","SystemUpdate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","viewReducer","settingsReducer","insulinUnitsReducer","proportionateCarbsReducer","navigator","addEventListener","serviceWorker","register","registration","data","location","reload","ready","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.23050448.chunk.js","sourcesContent":["import { en } from './en'\r\n\r\nexport const langs = {\r\n  en\r\n}\r\n","import React from 'react';\r\n\r\nexport const en = {\r\n  insulinUnitsTitle: 'Food insulin (bolus)',\r\n  proportionateCarbsTitle: 'Carbs by meal weight',\r\n  proportionateCarbsCarbRatioTitle: 'Carb ratio',\r\n  proportionateCarbsAddButtonText: 'Add to eaten carbs',\r\n  proportionateCarbsCarbsPerWeightLabelText: 'Carbs',\r\n  proportionateCarbsCarbsPerWeightInfoText: '',\r\n  proportionateCarbsColumnWeightLabelText: 'Per weight',\r\n  proportionateCarbsColumnWeightInfoText: '',\r\n  proportionateCarbsAmountConsumedTitle: 'Amount eaten',\r\n  proportionateCarbsTotalWeightLabelText: 'Total weight',\r\n  proportionateCarbsTotalWeightInfoText: '',\r\n  proportionateCarbsPortionRatioLabelText: 'Portion',\r\n  proportionateCarbsPortionRatioInfoText: '',\r\n  insulinUnitsAddProportionateCarbsButtonText: 'Add carbs by meal weight',\r\n  insulinUnitsConsumedCarbsLabelText: 'Eaten carbs',\r\n  insulinUnitsConsumedCarbsInfoText: <div>You can add together the number of carbs you've eaten here, 14+(16x4).<p>If you click the 'Add carbs by meal weight' button, you will be take to the 'Carbs by meal weight' calculator.</p></div>,\r\n  insulinUnitsCurrentBgLabelText: 'Current glucose',\r\n  insulinUnitsCurrentBgInfoText: '',\r\n  insulinUnitsUnitAdjustmentPercentageLabelText: \"Insulin efficiency adjustment\",\r\n  insulinUnitsUnitAdjustmentPercentageInfoText: <div>You an reduce the efficacy of your insulin with stress/illness or by sitting down a lot. Example: +20 for stress/illness/sitting, -20 for exercise.</div>,\r\n  insulinUnitsPersonalisedSettingsButtonText: 'Personalised settings',\r\n  insulinUnitsTargetBgLabelText: \"Target glucose\",\r\n  insulinUnitsTargetBgInfoText: \"\",\r\n  insulinUnitsCarbsPerUnitLabelText: \"Carbs per unit\",\r\n  insulinUnitsCarbsPerUnitInfoText: <div>How many carbs would you need exactly 1 unit to correct?<p>Bigger amounts mean less insulin, as you can eat more carbs per unit. Smaller amounts mean more insulin as you can eat fewer carbs per unit.</p></div>,\r\n  insulinUnitsBgPerUnitLabelText: \"Glucose correction per unit\",\r\n  insulinUnitsBgPerUnitInfoText: <div>How many mmol/l would your glucose drop for 1 unit?<p>Bigger amounts mean less insulin as 1 unit will move your blood sugar by a larger degree. Smaller amounts mean more insulin.</p></div>\r\n}\r\n","function addUI(settings) {\n  if (!settings) return settings;\n  const output = {};\n  for (const key in settings) {\n    if (key.startsWith('ui_')) continue;\n    output[key] = settings[key]\n    output[`ui_${key}`] = settings[key]\n  }\n  return output\n}\n\nfunction removeVersion(settings) {\n  return {...settings, version: null}\n}\n\nexport const defaultSettings = addUI({\n  version: \"0.0.12\",\n  needsUpdating: false,\n  consumedCarbs: 0,\n  currentBg: 5,\n  minimumUnits: 0.1,\n  carbsPerUnit: 0,\n  bgPerUnit: 0,\n  targetBg: 5,\n  unitAdjustmentPercentage: 0,\n  carbsPerColumnWeight: 0,\n  columnWeight: 100,\n  totalPacketWeight: 100,\n  portionRatio: 1,\n  minimumCarbs: 0.1,\n  lang: 'en'\n});\n\nconst savedSettings = removeVersion(addUI(JSON.parse(localStorage.getItem('settings') || 'null')) || {});\nfor (const key in defaultSettings) {\n  savedSettings[key] = savedSettings?.[key] ?? defaultSettings[key];\n}\n\nexport const initialState = {\n  view: {\n    title: ''\n  },\n  settings: savedSettings,\n  insulinUnits: {\n    consumedCarbs: null,\n    currentBg: null,\n    unitAdjustmentPercentage: null,\n    minimumUnits: null,\n    carbsPerUnit: null,\n    bgPerUnit: null,\n    targetBg: null,\n    ui_consumedCarbs: null,\n    ui_currentBg: null,\n    ui_unitAdjustmentPercentage: null,\n    ui_minimumUnits: null,\n    ui_carbsPerUnit: null,\n    ui_bgPerUnit: null,\n    ui_targetBg: null,\n    ui_unitAdjustmentRatio: 0,\n    bgDistance: 0,\n    bgUnits: 0,\n    carbUnits: 0,\n    totalUnits: 0,\n    adjustedTotalUnits: 0,\n    roundedAdjustedTotalUnits: 0\n  },\n  proportionateCarbs: {\n    carbsPerColumnWeight: null,\n    columnWeight: null,\n    totalPacketWeight: null,\n    portionRatio: null,\n    minimumCarbs: null,\n    ui_carbsPerColumnWeight: null,\n    ui_columnWeight: null,\n    ui_totalPacketWeight: null,\n    ui_portionRatio: null,\n    ui_minimumCarbs: null,\n    carbRatio: 0,\n    totalPacketCarbs: 0,\n    consumedCarbs: 0,\n    roundedConsumedCarbs: 0\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport { initialState } from './initialState'\n\nconst settingsSlice = createSlice({\n  name: 'settings',\n  initialState: initialState.settings,\n  reducers: {\n    allSettingsChanged(state, action) {\n      Object.assign(state, action.payload)\n      localStorage.setItem('settings', JSON.stringify(state, null, 2))\n    }\n  }\n})\n\nexport const {\n  allSettingsChanged\n} = settingsSlice.actions\n\nexport default settingsSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport { initialState } from './initialState'\n\nconst viewSlice = createSlice({\n  name: 'view',\n  initialState: initialState.view,\n  reducers: {\n    titleChanged(state, action) {\n      state.title = action.payload\n    }\n  }\n})\n\nexport const {\n  titleChanged\n} = viewSlice.actions\n\nexport default viewSlice.reducer\n","export default function round(value, precision) {\r\n  value = Math.round(value / precision) * precision\r\n  const valueAsString = String(value)\r\n  if (valueAsString.includes('.')) {\r\n    const precisionAsString = String(precision)\r\n    const precisionAfterDecimal = precisionAsString.slice(precisionAsString.indexOf('.') + 1)\r\n    const truncatedString = valueAsString.slice(0, valueAsString.indexOf('.') + 1 + precisionAfterDecimal.length)\r\n    return parseFloat(truncatedString)\r\n  }\r\n  return value\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\nimport round from '../utils/round'\nimport min from '../utils/min'\nimport { initialState } from './initialState'\n\nconst doUnitMath = (state, stateUpdate) => {\n  Object.assign(state, stateUpdate)\n\n  const consumedCarbs = state.consumedCarbs\n  const currentBg = state.currentBg\n  const unitAdjustmentPercentage = state.unitAdjustmentPercentage\n  const targetBg = state.targetBg\n  const carbsPerUnit = state.carbsPerUnit\n  const bgPerUnit = state.bgPerUnit\n  const minimumUnits = state.minimumUnits\n\n  const unitAdjustmentRatio = 1 + (unitAdjustmentPercentage / 100)\n  const bgDistance = (currentBg - targetBg)\n  const bgUnits = bgPerUnit ? (bgDistance / bgPerUnit) : 0\n  const carbUnits = carbsPerUnit ? (consumedCarbs / carbsPerUnit) : 0\n\n  const totalUnits = (bgUnits + carbUnits)\n  const adjustedTotalUnits = (totalUnits * unitAdjustmentRatio)\n  const roundedAdjustedTotalUnits = min(round(adjustedTotalUnits, minimumUnits))\n\n  Object.assign(state, {\n    unitAdjustmentRatio,\n    bgDistance,\n    bgUnits,\n    carbUnits,\n    totalUnits,\n    adjustedTotalUnits,\n    roundedAdjustedTotalUnits\n  })\n\n}\n\nconst insulinUnitsSlice = createSlice({\n  name: 'insulinUnits',\n  initialState: initialState.insulinUnits,\n  reducers: {\n    allInsulinUnitsChanged(state, action) {\n      doUnitMath(state, action.payload)\n    }\n  }\n})\n\nexport const {\n  allInsulinUnitsChanged\n} = insulinUnitsSlice.actions\n\nexport default insulinUnitsSlice.reducer\n","export default function min(value, min = 0) {\r\n  return value < min ? min : value;\r\n}\r\n","import { evaluate } from 'mathjs'\n\nexport default function doStringMath(str) {\n  str = String(str)\n  str = str.replace(/x/i, '*')\n  return evaluate(str)\n}\n","import doStringMath from './doStringMath';\n\nexport default function mergeStates(state, settings, update = {}) {\n  state = {...state}\n  update = {...update}\n  const merged = {}\n  for (const key in update) {\n    // do math only on non ui values\n    try {\n      update[key] = key.startsWith('ui_') ? update[key] : doStringMath(update[key])\n    } catch (err) {\n      // Ignore mid-math errors\n      delete update[key]\n    }\n  }\n  for (const key in update) {\n    const fromKey = key.startsWith('ui_') ? key.slice(3) : key;\n    // if updated value matches settings then remove\n    if (update[key] === settings[fromKey]) {\n      update[key] = null;\n      state[key] = null;\n      merged[key] = null;\n    }\n  }\n  for (const key in state) {\n    const fromKey = key.startsWith('ui_') ? key.slice(3) : key;\n    // output final value filling in defaults\n    merged[key] = update[key] ?? state[key] ?? settings[fromKey]\n  }\n  return merged\n}\n","import doStringMath from './doStringMath';\r\n\r\nexport default function resetStates(state, settings) {\r\n  state = {...state}\r\n  const update = {};\r\n  for (const key in state) {\r\n    if (!key.startsWith('ui_')) continue;\r\n    const fromKey = key.slice(3)\r\n    update[key] = settings[fromKey]\r\n    update[fromKey] = settings[fromKey]\r\n  }\r\n  const merged = {}\r\n  for (const key in update) {\r\n    // do math only on non ui values\r\n    try {\r\n      update[key] = key.startsWith('ui_') ? update[key] : doStringMath(update[key])\r\n    } catch (err) {\r\n      // Ignore mid-math errors\r\n      delete update[key]\r\n    }\r\n  }\r\n  for (const key in update) {\r\n    const fromKey = key.startsWith('ui_') ? key.slice(3) : key;\r\n    // if updated value matches settings then remove\r\n    if (update[key] === settings[fromKey]) {\r\n      update[key] = null;\r\n      state[key] = null;\r\n      merged[key] = null;\r\n    }\r\n  }\r\n  for (const key in state) {\r\n    const fromKey = key.startsWith('ui_') ? key.slice(3) : key;\r\n    // output final value filling in defaults\r\n    merged[key] = update[key] ?? state[key] ?? settings[fromKey]\r\n  }\r\n  return merged\r\n}\r\n","export default function makeOnFocusSelect(defaults, dispatch, action, { noui = false } = {}) {\n  return (name, event) => {\n    event.target.select();\n  }\n}\n","import mergeStates from \"./mergeStates\"\n\nexport default function makeOnChanged(state, settings, dispatch, action, { noui = false } = {}) {\n  return (name, event) => {\n    const value = event.target.value\n    try {\n      dispatch(\n        action(mergeStates(\n          state,\n          settings,\n          noui\n          ? {\n            [name]: value || settings[name]\n          }\n          : {\n            [name]: value || settings[name],\n            [`ui_${name}`]: value\n          }\n        ))\n      )\n    } catch (err) {}\n  }\n}\n","export default function makeOnBlur(defaults, dispatch, action, { noui = false } = {}) {\n  return (name, event) => {\n    const value = event.target.value\n    if (value !== \"\") return;\n    dispatch(\n      action(\n        noui\n        ? {\n          [name]: defaults[name],\n        }\n        : {\n          [name]: defaults[name],\n          [`ui_${name}`]: defaults[name]\n        }\n      )\n    )\n  }\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst outputContainer = {\n  paddingBottom: '1em'\n}\n\nconst addCarbs = {\n  display: 'inline-flex',\n  padding: '6px 0px',\n  minWidth: '32px'\n}\n\nconst topButton = {\n  marginTop: '0em',\n  width: '100%'\n}\n\nconst rawStyles = {\n  addCarbs,\n  outputContainer,\n  topButton\n};\n\nconst styles = makeStyles(rawStyles);\n\nexport default styles\n\nexport {\n  addCarbs,\n  outputContainer,\n  topButton\n}\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  Link\n} from \"react-router-dom\";\nimport { TextField, Typography, InputAdornment, Button, Accordion, AccordionSummary, AccordionDetails } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport { titleChanged } from './store/view';\nimport { allInsulinUnitsChanged } from './store/insulinUnits'\n// import { allProportionateCarbsChanged } from './store/proportionateCarbs'\nimport mergeStates from './utils/mergeStates'\nimport resetStates from './utils/resetStates';\nimport makeOnFocusSelect from './utils/makeOnFocusSelect';\nimport makeOnFocusGotoEndOrSelectZero from './utils/makeOnFocusGotoEndOrSelectZero';\nimport makeOnChanged from './utils/makeOnChanged';\nimport makeOnBlur from './utils/makeOnBlur'\nimport {\n  outputContainer,\n  topButton\n} from './utils/styles';\nimport {\n  Restaurant as RestaurantIcon,\n  LocalHospitalOutlined as FoodInsulinIcon,\n  ExpandMore as ExpandMoreIcon,\n  ShowChart as ShowChartIcon,\n  FitnessCenter as FitnessCenterIcon,\n  Settings as SettingsIcon,\n  Autorenew as AutorenewIcon,\n  Speed as ProportionateCarbsButtonIcon,\n  Info as InfoIcon,\n} from '@material-ui/icons'\nimport { langs } from './lang/langs';\n\nexport const InsulinUnits = () => {\n  // const proportionateCarbsState = useSelector(state => state.proportionateCarbs)\n  const state = useSelector(state => state.insulinUnits)\n  const settings = useSelector(state => state.settings)\n  const lang = langs[settings.lang]\n  const values = mergeStates(state, settings)\n  const dispatch = useDispatch()\n\n  const onKeyUp = (event) => {\n    if (event.keyCode !== 13) return;\n    event.target.blur()\n  }\n  const onFocusGotoEndOrSelectZero = makeOnFocusGotoEndOrSelectZero()\n  const onFocusSelect = makeOnFocusSelect()\n  const onChanged = makeOnChanged(state, settings, dispatch, allInsulinUnitsChanged)\n  const onBlur = makeOnBlur(settings, dispatch, allInsulinUnitsChanged)\n\n  useEffect(() => {\n    dispatch(\n      titleChanged(lang.insulinUnitsTitle)\n    )\n  })\n\n  const [showConsumedCarbs, setShowConsumedCarbs] = useState(false)\n  const [showCurrentBG, setShowCurrentBG] = useState(false)\n  const [showUnitAdjustmentPercentage, setShowUnitAdjustmentPercentage] = useState(false)\n  const [showTargetBg, setShowTargetBg] = useState(false)\n  const [showCarbsPerUnit, setShowCarbsPerUnit] = useState(false)\n  const [showBgPerUnit, setShowBgPerUnit] = useState(false)\n\n  return (\n    <React.Fragment>\n    <section className=\"insulinunits screen__container\">\n\n      <div className=\"insulinunits__output\" style={outputContainer}>\n        <Typography variant=\"h2\" noWrap>\n          {state.roundedAdjustedTotalUnits||0}units\n        </Typography>\n      </div>\n\n      <div className=\"insulinunits__button__reset\">\n        <Button\n          className='button'\n          style={topButton}\n          onClick={\n            () => {\n              dispatch(allInsulinUnitsChanged(resetStates(\n                state,\n                settings\n              )))\n            }\n          }\n        >\n          <AutorenewIcon />\n          &nbsp;Reset\n        </Button>\n      </div>\n\n      <div className=\"insulinunits_input input__group\">\n\n        <div className=\"insulinunits__input__consumedcarbs input__container\">\n          <TextField label={<div>\n            {lang.insulinUnitsConsumedCarbsLabelText}\n            {lang.insulinUnitsConsumedCarbsInfoText &&\n            <React.Fragment>\n              <Button className=\"btn-info\" onClick={() => setShowConsumedCarbs(!showConsumedCarbs)}>\n                <InfoIcon />\n              </Button>\n              <Alert severity=\"info\" style={{display: showConsumedCarbs ? 'flex':'none'}} onClose={() => setShowConsumedCarbs(false)}>\n                {lang.insulinUnitsConsumedCarbsInfoText}\n              </Alert>\n            </React.Fragment>}\n            </div>}\n            onKeyUp={onKeyUp}\n            onFocus={onFocusGotoEndOrSelectZero.bind(this, 'consumedCarbs')}\n            onChange={onChanged.bind(this, 'consumedCarbs')}\n            onBlur={onBlur.bind(this, 'consumedCarbs')}\n            value={values.ui_consumedCarbs}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><RestaurantIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">{state.consumedCarbs||0}g</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"insulinunits__button__addproportionatecarbs\">\n          <Button\n              className='button'\n              style={topButton}\n              component={Link} to=\"/proportionatecarbs\"\n            >\n              <ProportionateCarbsButtonIcon />\n              &nbsp;{lang.insulinUnitsAddProportionateCarbsButtonText}\n            </Button>\n        </div>\n\n        <div className=\"insulinunits__input__currentbg input__container\">\n          <TextField label={<div>\n            {lang.insulinUnitsCurrentBgLabelText}\n            {lang.insulinUnitsCurrentBgInfoText &&\n            <React.Fragment>\n              <Button className=\"btn-info\" onClick={() => setShowCurrentBG(!showCurrentBG)}>\n                <InfoIcon />\n              </Button>\n              <Alert severity=\"info\" style={{display: showCurrentBG ? 'flex':'none'}} onClose={() => setShowCurrentBG(false)}>\n                {lang.insulinUnitsCurrentBgInfoText}\n              </Alert>\n            </React.Fragment>}\n            </div>}\n            onKeyUp={onKeyUp}\n            onFocus={onFocusSelect.bind(this, 'currentBg')}\n            onChange={onChanged.bind(this, 'currentBg')}\n            onBlur={onBlur.bind(this, 'currentBg')}\n            value={values.ui_currentBg}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><ShowChartIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">mmol/l</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"insulinunits__input__unitadjustmentpercentage input__container\">\n          <TextField label={<div>\n            {lang.insulinUnitsUnitAdjustmentPercentageLabelText}\n            {lang.insulinUnitsUnitAdjustmentPercentageInfoText &&\n            <React.Fragment>\n              <Button className=\"btn-info\" onClick={() => setShowUnitAdjustmentPercentage(!showUnitAdjustmentPercentage)}>\n                <InfoIcon />\n              </Button>\n              <Alert severity=\"info\" style={{display: showUnitAdjustmentPercentage ? 'flex':'none'}} onClose={() => setShowUnitAdjustmentPercentage(false)}>\n                {lang.insulinUnitsUnitAdjustmentPercentageInfoText}\n              </Alert>\n            </React.Fragment>\n            }\n          </div>}\n            onKeyUp={onKeyUp}\n            onFocus={onFocusSelect.bind(this, 'unitAdjustmentPercentage')}\n            onChange={onChanged.bind(this, 'unitAdjustmentPercentage')}\n            onBlur={onBlur.bind(this, 'unitAdjustmentPercentage')}\n            value={values.ui_unitAdjustmentPercentage}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><FitnessCenterIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <Accordion>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <SettingsIcon />\n            &nbsp;{lang.insulinUnitsPersonalisedSettingsButtonText}\n          </AccordionSummary>\n          <AccordionDetails>\n\n            <div className=\"insulinunits__input__targetbg input__container\">\n              <TextField label={<div>\n                {lang.insulinUnitsTargetBgLabelText}\n                {lang.insulinUnitsTargetBgInfoText &&\n                <React.Fragment>\n                  <Button className=\"btn-info\" onClick={() => setShowTargetBg(!showTargetBg)}>\n                    <InfoIcon />\n                  </Button>\n                  <Alert severity=\"info\" style={{display: showTargetBg ? 'flex':'none'}} onClose={() => setShowTargetBg(false)}>\n                    {lang.insulinUnitsTargetBgInfoText}\n                  </Alert>\n                </React.Fragment>\n                }\n              </div>}\n                onKeyUp={onKeyUp}\n                onFocus={onFocusSelect.bind(this, 'targetBg')}\n                onChange={onChanged.bind(this, 'targetBg')}\n                onBlur={onBlur.bind(this, 'targetBg')}\n                value={values.ui_targetBg}\n                InputProps={{\n                  startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n                  endAdornment: <InputAdornment position=\"end\">mmol/l</InputAdornment>,\n                }}\n              />\n            </div>\n\n            <div className=\"insulinunits__input__carbsperunit input__container\">\n              <TextField label={<div>\n                {lang.insulinUnitsCarbsPerUnitLabelText}\n                {lang.insulinUnitsCarbsPerUnitInfoText &&\n                  <React.Fragment>\n                  <Button className=\"btn-info\" onClick={() => setShowCarbsPerUnit(!showCarbsPerUnit)}>\n                    <InfoIcon />\n                  </Button>\n                  <Alert severity=\"info\" style={{display: showCarbsPerUnit ? 'flex':'none'}} onClose={() => setShowCarbsPerUnit(false)}>\n                    {lang.insulinUnitsCarbsPerUnitInfoText}\n                  </Alert>\n                  </React.Fragment>\n                }\n              </div>}\n                onKeyUp={onKeyUp}\n                onFocus={onFocusSelect.bind(this, 'carbsPerUnit')}\n                onChange={onChanged.bind(this, 'carbsPerUnit')}\n                onBlur={onBlur.bind(this, 'carbsPerUnit')}\n                value={values.ui_carbsPerUnit}\n                InputProps={{\n                  startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n                  endAdornment: <InputAdornment position=\"end\">g</InputAdornment>,\n                }}\n              />\n            </div>\n\n            <div className=\"insulinunits__input__bgperunit input__container\">\n              <TextField label={<div>\n                {lang.insulinUnitsBgPerUnitLabelText}\n                {lang.insulinUnitsBgPerUnitInfoText &&\n                  <React.Fragment>\n                    <Button className=\"btn-info\" onClick={() => setShowBgPerUnit(!showBgPerUnit)}>\n                      <InfoIcon />\n                    </Button>\n                    <Alert severity=\"info\" style={{display: showBgPerUnit ? 'flex':'none'}} onClose={() => setShowBgPerUnit(false)}>\n                      {lang.insulinUnitsBgPerUnitInfoText}\n                    </Alert>\n                  </React.Fragment>\n                }\n              </div>}\n                onKeyUp={onKeyUp}\n                onFocus={onFocusSelect.bind(this, 'bgPerUnit')}\n                onChange={onChanged.bind(this, 'bgPerUnit')}\n                onBlur={onBlur.bind(this, 'bgPerUnit')}\n                value={values.ui_bgPerUnit}\n                InputProps={{\n                  startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n                  endAdornment: <InputAdornment position=\"end\">mmol/l</InputAdornment>,\n                }}\n              />\n            </div>\n          </AccordionDetails>\n        </Accordion>\n\n      </div>\n\n    </section>\n  </React.Fragment>\n  )\n}\n","export default function makeOnFocusGotoEndOrSelectZero(defaults, dispatch, action, { noui = false } = {}) {\n  return (name, event) => {\n    const value = event.target.value\n    if (value === \"0\") {\n      event.target.select();\n      return\n    }\n    if (event.target.setSelectionRange) {\n      var len = event.target.value.length * 2;\n      setTimeout(() => {\n        event.target.setSelectionRange(len, len);\n      }, 0)\n    } else {\n      event.target.value = ''\n      event.target.value = value\n    }\n    event.target.scrollTop = 99999\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport round from '../utils/round'\nimport { initialState } from './initialState'\n\nconst doUnitMath = (state, stateUpdate) => {\n  Object.assign(state, stateUpdate)\n\n  const carbsPerColumnWeight = state.carbsPerColumnWeight\n  const columnWeight = state.columnWeight\n  const totalPacketWeight = state.totalPacketWeight\n  const portionRatio = state.portionRatio;\n  const minimumCarbs = state.minimumCarbs\n\n  const carbRatio = columnWeight ? (carbsPerColumnWeight / columnWeight) : 0\n  const totalPacketCarbs = carbRatio * totalPacketWeight\n  const consumedCarbs = (totalPacketCarbs * portionRatio);\n\n  const roundedConsumedCarbs = round(consumedCarbs, minimumCarbs)\n\n  Object.assign(state, {\n    carbRatio,\n    totalPacketCarbs,\n    consumedCarbs,\n    roundedConsumedCarbs\n  })\n\n}\n\nconst proportionateCarbsSlice = createSlice({\n  name: 'proportionateCarbs',\n  initialState: initialState.proportionateCarbs,\n  reducers: {\n    allProportionateCarbsChanged(state, action) {\n      doUnitMath(state, action.payload)\n    }\n  }\n})\n\nexport const {\n  allProportionateCarbsChanged\n} = proportionateCarbsSlice.actions\n\nexport default proportionateCarbsSlice.reducer\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  Link\n} from \"react-router-dom\";\nimport { Typography, TextField, InputAdornment, Button, Select, InputLabel } from '@material-ui/core'\nimport Alert from '@material-ui/lab/Alert';\nimport { titleChanged } from './store/view';\nimport { allInsulinUnitsChanged } from './store/insulinUnits';\nimport { allProportionateCarbsChanged } from './store/proportionateCarbs'\nimport mergeStates from './utils/mergeStates'\nimport makeOnFocusSelect from './utils/makeOnFocusSelect';\nimport makeOnChanged from './utils/makeOnChanged';\nimport makeOnBlur from './utils/makeOnBlur'\nimport {\n  outputContainer,\n  topButton\n} from './utils/styles';\nimport {\n  Maximize as MaximizeIcon,\n  MenuOpen as MenuOpenIcon,\n  RadioButtonUnchecked as RadioButtonUncheckedIcon,\n  Cake as CakeIcon,\n  DataUsage as DataUsageIcon,\n  Add as AddIcon,\n  Autorenew as AutorenewIcon,\n  Speed as ProportionateCarbsButtonIcon,\n  Info as InfoIcon,\n} from '@material-ui/icons'\nimport resetStates from './utils/resetStates';\nimport { langs } from './lang/langs';\n\nexport const ProportionateCarbs = () => {\n  const insulinUnitsState = useSelector(state => state.insulinUnits)\n  const state = useSelector(state => state.proportionateCarbs)\n  const settings = useSelector(state => state.settings)\n  const lang = langs[settings.lang]\n  const values = mergeStates(state, settings)\n  const dispatch = useDispatch()\n\n  const onKeyUp = (event) => {\n    if (event.keyCode !== 13) return;\n    event.target.blur()\n  }\n  const onFocusSelect = makeOnFocusSelect()\n  const onChanged = makeOnChanged(state, settings, dispatch, allProportionateCarbsChanged)\n  const onBlur = makeOnBlur(settings, dispatch, allProportionateCarbsChanged)\n\n  useEffect(() => {\n    dispatch(\n      titleChanged(lang.proportionateCarbsTitle)\n    )\n  })\n\n  const [showCarbsPerWeight, setShowCarbsPerWeight] = useState(false)\n  const [showColumnWeight, setShowColumnWeight] = useState(false)\n  const [showTotalWeight, setShowTotalWeight] = useState(false)\n  const [showPortionRatio, setShowPortionRatio] = useState(false)\n\n  return (\n    <section className=\"proportionatecarbs screen__container\">\n\n      <div className=\"proportionatecarbs__output\" style={outputContainer}>\n        <Typography variant=\"h2\" noWrap>\n          {state.roundedConsumedCarbs||0}g\n        </Typography>\n      </div>\n\n      <div className=\"proportionatecarbs__button__reset\">\n        <Button\n          className='button'\n          style={topButton}\n          onClick={\n            () => {\n              dispatch(allProportionateCarbsChanged(resetStates(\n                state,\n                settings\n              )))\n            }\n          }\n        >\n          <AutorenewIcon />\n          &nbsp;Reset\n        </Button>\n      </div>\n\n      <Typography className=\"section__divider\" variant=\"h6\" noWrap>\n        {lang.proportionateCarbsCarbRatioTitle}\n      </Typography>\n\n      <div className=\"proportionatecarbs_input input__group\">\n\n        <div className=\"proportionatecarbs__input__carbsperweight__container\">\n          <div className=\"proportionatecarbs__input__carbspercolumnweight input__container\">\n            <TextField label={<div>\n            {lang.proportionateCarbsCarbsPerWeightLabelText}\n            {lang.proportionateCarbsCarbsPerWeightInfoText &&\n            <React.Fragment>\n              <Button className=\"btn-info\" onClick={() => setShowCarbsPerWeight(!showCarbsPerWeight)}>\n                <InfoIcon />\n              </Button>\n              <Alert severity=\"info\" style={{display: showCarbsPerWeight ? 'flex':'none'}} onClose={() => setShowCarbsPerWeight(false)}>\n                {lang.proportionateCarbsCarbsPerWeightInfoText}\n              </Alert>\n            </React.Fragment>}\n            </div>}\n              onKeyUp={onKeyUp}\n              onFocus={onFocusSelect.bind(this, 'carbsPerColumnWeight')}\n              onChange={onChanged.bind(this, 'carbsPerColumnWeight')}\n              onBlur={onBlur.bind(this, 'carbsPerColumnWeight')}\n              value={values.ui_carbsPerColumnWeight}\n              InputProps={{\n                startAdornment: <InputAdornment position=\"start\"><MenuOpenIcon /></InputAdornment>,\n                endAdornment: <InputAdornment position=\"end\">g</InputAdornment>,\n              }}\n            />\n          </div>\n\n          <div className=\"proportionatecarbs__input__columnweight input__container\">\n            <TextField label={<div>\n            {lang.proportionateCarbsColumnWeightLabelText}\n            {lang.proportionateCarbsColumnWeightInfoText &&\n            <React.Fragment>\n              <Button className=\"btn-info\" onClick={() => setShowColumnWeight(!showColumnWeight)}>\n                <InfoIcon />\n              </Button>\n              <Alert severity=\"info\" style={{display: showColumnWeight ? 'flex':'none'}} onClose={() => setShowColumnWeight(false)}>\n                {lang.proportionateCarbsColumnWeightInfoText}\n              </Alert>\n            </React.Fragment>}\n            </div>}\n              onKeyUp={onKeyUp}\n              onFocus={onFocusSelect.bind(this, 'columnWeight')}\n              onChange={onChanged.bind(this, 'columnWeight')}\n              onBlur={onBlur.bind(this, 'columnWeight')}\n              value={values.ui_columnWeight}\n              InputProps={{\n                startAdornment: <InputAdornment position=\"start\"><MaximizeIcon /></InputAdornment>,\n                endAdornment: <InputAdornment position=\"end\">g</InputAdornment>,\n              }}\n            />\n          </div>\n        </div>\n\n        <Typography className=\"section__divider\" variant=\"h6\" noWrap>\n          {lang.proportionateCarbsAmountConsumedTitle}\n        </Typography>\n\n        <div className=\"proportionatecarbs__input__amountconsumed__container\">\n        <div className=\"proportionatecarbs__input__totalpacketweight input__container\">\n          <TextField label={<div>\n            {lang.proportionateCarbsTotalWeightLabelText}\n            {lang.proportionateCarbsTotalWeightInfoText &&\n            <React.Fragment>\n              <Button className=\"btn-info\" onClick={() => setShowTotalWeight(!showTotalWeight)}>\n                <InfoIcon />\n              </Button>\n              <Alert severity=\"info\" style={{display: showTotalWeight ? 'flex':'none'}} onClose={() => setShowTotalWeight(false)}>\n                {lang.proportionateCarbsTotalWeightInfoText}\n              </Alert>\n            </React.Fragment>}\n            </div>}\n            onKeyUp={onKeyUp}\n            onFocus={onFocusSelect.bind(this, 'totalPacketWeight')}\n            onChange={onChanged.bind(this, 'totalPacketWeight')}\n            onBlur={onBlur.bind(this, 'totalPacketWeight')}\n            value={values.ui_totalPacketWeight}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><CakeIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">g</InputAdornment>,\n            }}\n          />\n        </div>\n        <div className=\"proportionatecarbs__input__portionratio input__container\">\n          <InputLabel htmlFor=\"portionratio\">{lang.proportionateCarbsPortionRatioLabelText}</InputLabel>\n          <div className=\"select__container\">\n          <Select\n            native\n            value={values.ui_portionRatio}\n            onChange={onChanged.bind(this, 'portionRatio')}\n            onBlur={onBlur.bind(this, 'portionRatio')}\n            label={<div>\n            {lang.proportionateCarbsPortionRatioLabelText}\n            {lang.proportionateCarbsPortionRatioInfoText &&\n            <React.Fragment>\n              <Button className=\"btn-info\" onClick={() => setShowPortionRatio(!showPortionRatio)}>\n                <InfoIcon />\n              </Button>\n              <Alert severity=\"info\" style={{display: showPortionRatio ? 'flex':'none'}} onClose={() => setShowPortionRatio(false)}>\n                {lang.proportionateCarbsPortionRatioInfoText}\n              </Alert>\n            </React.Fragment>}\n            </div>}\n            inputProps={{\n              name: 'portionratio',\n              id: 'portionratio',\n            }}\n            startAdornment={<InputAdornment position=\"start\"><DataUsageIcon /></InputAdornment>}\n          >\n            <option aria-label=\"None\" value={1}>Whole</option>\n            <option value={1/2}>1/2 Half</option>\n            <option value={1/3}>1/3 One third</option>\n            <option value={1/4}>1/4 One quarter</option>\n            <option value={1/5}>1/5 One fifth</option>\n            <option value={1/6}>1/6 One sixth</option>\n            <option value={1/8}>1/8 One eighth</option>\n            <option value={2}>2 Two</option>\n            <option value={2/3}>2/3 Two thirds</option>\n            <option value={2/5}>2/5 Two fifths</option>\n            <option value={3}>3 Three</option>\n            <option value={3/5}>3/5 Three fifths</option>\n            <option value={3/4}>3/4 Three quarters</option>\n            <option value={4}>4 Four</option>\n            <option value={4/5}>4/5 Four fifths</option>\n            <option value={5}>5 Five</option>\n            <option value={5/6}>5/6 Five sixths</option>\n          </Select>\n          </div>\n        </div>\n        </div>\n      </div>\n\n      <div className=\"proportionatecarbs__button__addtoinsulin\">\n        <Button\n          className='button'\n          style={topButton}\n          component={Link} to=\"/insulinunits\"\n          onClick={\n            () => {\n              const carbs = (state.roundedConsumedCarbs||0);\n              if (!carbs) return;\n              const value = parseFloat(insulinUnitsState.ui_consumedCarbs)\n                ? `${insulinUnitsState.ui_consumedCarbs}+${carbs}`\n                : `${carbs}`\n              dispatch(allInsulinUnitsChanged(mergeStates(\n                insulinUnitsState,\n                settings,\n                {\n                  'consumedCarbs': value,\n                  'ui_consumedCarbs': value\n                }\n              )))\n            }\n          }\n        >\n          <AddIcon />\n          &nbsp;{lang.proportionateCarbsAddButtonText}\n        </Button>\n      </div>\n\n    </section>\n  )\n}\n","import React, { useEffect, useState } from 'react';\nimport { defaultSettings } from './store/initialState';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { TextField, InputAdornment, Button, InputLabel, Select } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport { titleChanged } from './store/view';\nimport { allSettingsChanged } from './store/settings'\nimport makeOnChanged from './utils/makeOnChanged';\nimport makeOnBlur from './utils/makeOnBlur'\nimport {\n  // LocalHospitalOutlined as LocalHospitalOutlinedIcon,\n  // Restaurant as RestaurantIcon,\n  Cake as CakeIcon,\n  Maximize as MaximizeIcon,\n  ShowChart as ShowChartIcon,\n  FitnessCenter as FitnessCenterIcon,\n  Settings as SettingsIcon,\n  RadioButtonUnchecked as RadioButtonUncheckedIcon,\n  DataUsage as DataUsageIcon,\n  Info as InfoIcon\n} from '@material-ui/icons'\nimport { langs } from './lang/langs';\n\nexport const Settings = () => {\n  const settings = useSelector(state => state.settings)\n  const lang = langs[settings.lang]\n  const dispatch = useDispatch()\n  const onChanged = makeOnChanged(settings, defaultSettings, dispatch, allSettingsChanged, { noui: false })\n  const onBlur = makeOnBlur(defaultSettings, dispatch, allSettingsChanged, { noui: false })\n\n  useEffect(() => {\n    dispatch(\n      titleChanged('Settings')\n    )\n  })\n\n  const [showPortionRatio, setShowPortionRatio] = useState(false)\n\n  return (\n    <section className=\"settings screen__container\">\n\n      <div className=\"settings_input input__group\">\n\n        <div className=\"settings__input__currentbg input__container\">\n          <TextField label=\"Default current blood glucose\"\n            onChange={onChanged.bind(this, 'currentBg')}\n            onBlur={onBlur.bind(this, 'currentBg')}\n            value={settings.ui_currentBg}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><ShowChartIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">mmol/l</InputAdornment>,\n            }}\n            helperText=\":: This should match default target blood glucose ::\"\n          />\n        </div>\n\n        <div className=\"settings__input__targetbg input__container\">\n          <TextField label=\"Default target blood glucose\"\n            onChange={onChanged.bind(this, 'targetBg')}\n            onBlur={onBlur.bind(this, 'targetBg')}\n            value={settings.ui_targetBg}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">mmol/l</InputAdornment>,\n            }}\n            helperText=\":: This should match default current blood glucose ::\"\n          />\n        </div>\n\n        <div className=\"settings__input__unitadjustmentpercentage input__container\">\n          <TextField label=\"Default insulin efficiency adjustment\"\n            onChange={onChanged.bind(this, 'unitAdjustmentPercentage')}\n            onBlur={onBlur.bind(this, 'unitAdjustmentPercentage')}\n            value={settings.ui_unitAdjustmentPercentage}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><FitnessCenterIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n            }}\n            helperText=\":: Example: +20 for stress/illness/sitting, -20 for exercise ::\"\n          />\n        </div>\n\n        <div className=\"settings__input__carbsperunit input__container\">\n          <TextField label=\"Default carbs per unit\"\n            onChange={onChanged.bind(this, 'carbsPerUnit')}\n            onBlur={onBlur.bind(this, 'carbsPerUnit')}\n            value={settings.ui_carbsPerUnit}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">g</InputAdornment>,\n            }}\n            helperText=\":: How many carbs would you need exactly 1 unit to correct? Bigger amounts mean less insulin, as you can eat more carbs per unit. Smaller amounts mean more insulin as you can eat fewer carbs per unit. ::\"\n          />\n        </div>\n\n        <div className=\"settings__input__bgperunit input__container\">\n          <TextField label=\"Default blood glucose correction per unit\"\n            onChange={onChanged.bind(this, 'bgPerUnit')}\n            onBlur={onBlur.bind(this, 'bgPerUnit')}\n            value={settings.ui_bgPerUnit}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">mmol/l</InputAdornment>,\n            }}\n            helperText=\":: How many mmol/l would your glucose drop for 1 unit? Bigger amounts mean less insulin as 1 unit will move your blood sugar by a larger degree. Smaller amounts mean more insulin. ::\"\n          />\n        </div>\n\n        <div className=\"settings__input__columnweight input__container\">\n          <TextField label=\"Default per weight\"\n            onChange={onChanged.bind(this, 'columnWeight')}\n            onBlur={onBlur.bind(this, 'columnWeight')}\n            value={settings.ui_columnWeight}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><MaximizeIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">g</InputAdornment>,\n            }}\n            helperText=\":: The 'per weight' or 'column weight', normally 100g ::\"\n          />\n        </div>\n\n        <div className=\"settings__input__totalpacketweight input__container\">\n          <TextField label=\"Default total (net) weight\"\n            onChange={onChanged.bind(this, 'totalPacketWeight')}\n            onBlur={onBlur.bind(this, 'totalPacketWeight')}\n            value={settings.ui_totalPacketWeight}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><CakeIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">g</InputAdornment>,\n            }}\n            helperText=\":: Total weight of the packet/cake/meal ::\"\n          />\n        </div>\n\n        <div className=\"proportionatecarbs__input__portionratio input__container\">\n          <InputLabel htmlFor=\"portionratio\">{lang.proportionateCarbsPortionRatioLabelText}</InputLabel>\n          <div className=\"select__container\">\n          <Select\n            native\n            value={settings.ui_portionRatio}\n            onChange={onChanged.bind(this, 'portionRatio')}\n            onBlur={onBlur.bind(this, 'portionRatio')}\n            label={<div>\n            {lang.proportionateCarbsPortionRatioLabelText}\n            {lang.proportionateCarbsPortionRatioInfoText &&\n            <React.Fragment>\n              <Button className=\"btn-info\" onClick={() => setShowPortionRatio(!showPortionRatio)}>\n                <InfoIcon />\n              </Button>\n              <Alert severity=\"info\" style={{display: showPortionRatio ? 'flex':'none'}} onClose={() => setShowPortionRatio(false)}>\n                {lang.proportionateCarbsPortionRatioInfoText}\n              </Alert>\n            </React.Fragment>}\n            </div>}\n            inputProps={{\n              name: 'portionratio',\n              id: 'portionratio',\n            }}\n            startAdornment={<InputAdornment position=\"start\"><DataUsageIcon /></InputAdornment>}\n          >\n            <option aria-label=\"None\" value={1}>Whole</option>\n            <option value={1/2}>1/2 Half</option>\n            <option value={1/3}>1/3 One third</option>\n            <option value={1/4}>1/4 One quarter</option>\n            <option value={1/5}>1/5 One fifth</option>\n            <option value={1/6}>1/6 One sixth</option>\n            <option value={1/8}>1/8 One eighth</option>\n            <option value={2}>2 Two</option>\n            <option value={2/3}>2/3 Two thirds</option>\n            <option value={2/5}>2/5 Two fifths</option>\n            <option value={3}>3 Three</option>\n            <option value={3/5}>3/5 Three fifths</option>\n            <option value={3/4}>3/4 Three quarters</option>\n            <option value={4}>4 Four</option>\n            <option value={4/5}>4/5 Four fifths</option>\n            <option value={5}>5 Five</option>\n            <option value={5/6}>5/6 Five sixths</option>\n          </Select>\n          </div>\n        </div>\n\n        <div className=\"settings__input__minimumcarbs input__container\">\n          <TextField label=\"Minimum carbs\"\n            onChange={onChanged.bind(this, 'minimumCarbs')}\n            onBlur={onBlur.bind(this, 'minimumCarbs')}\n            value={settings.ui_minimumCarbs}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">g</InputAdornment>,\n            }}\n            helperText=\":: Carbs will be rounded to this amount ::\"\n          />\n        </div>\n\n        <div className=\"settings__input__minimumunits input__container\">\n          <TextField label=\"Minimum units\"\n            onChange={onChanged.bind(this, 'minimumUnits')}\n            onBlur={onBlur.bind(this, 'minimumUnits')}\n            value={settings.ui_minimumUnits}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">unit</InputAdornment>,\n            }}\n            helperText=\":: Units will be rounded to this amount ::\"\n          />\n        </div>\n\n\n      </div>\n\n    </section>\n  )\n}\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux'\r\nimport { titleChanged } from './store/view';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nexport const Warning = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      titleChanged('Warning')\r\n    )\r\n  })\r\n\r\n  return <section className=\"proportionatecarbs screen__container\">\r\n    <Typography variant=\"h4\" noWrap>\r\n      WARNING:\r\n    </Typography>\r\n    <div>\r\n    This app is to be used only as an <b>indication</b> of dosage amounts.\r\n    <p>\r\n      It is imperative that the user understands how to use the app and accepts liability for its use. The author accepts no liability for loss or damage resulting from the use of this app.\r\n    </p>\r\n    <p>\r\n      Please make sure you understand, set and appropriately adjust your \"<b>Default blood glucose correction per unit</b>\" and \"<b>Default carbs per unit</b>\" amounts in the settings panel before using this app.\r\n    </p>\r\n    <p>\r\n      The bolus insulin calculator <b>DOES NOT</b> take into account rising and falling of your blood glucose over time. You <b>MUST</b> adjust your units manually.\r\n    </p>\r\n    <p>\r\n      It is advised to start with the correct <b>BASAL</b> insulin first. To do this you should eat a no carb evening meal or fast on your evening meal. Adjust you basal insulin until your blood glucose is flat over night. Make sure to do this when you are not ill, stressed or doing abnormal amounts of exercise, you need a baseline basal that you can adjust later.\r\n    </p>\r\n    <p>\r\n      Once your basal insulin dose is correct, you can change you default carbohydrates per unit and default blood glucose correction per unit to best suit meal times and corrections. A bigger carbs per unit and blood glucose per unit value will mean less insulin, a smaller value will mean more insulin.\r\n    </p>\r\n    </div>\r\n  </section>\r\n\r\n}\r\n","/* eslint-disable react/jsx-no-target-blank */\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { titleChanged } from './store/view';\r\n\r\nexport const About = () => {\r\n  const dispatch = useDispatch();\r\n  const settings = useSelector(state => state.settings)\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      titleChanged('About')\r\n    )\r\n  })\r\n\r\n  return <section className=\"proportionatecarbs screen__container\">\r\n    <div>\r\n      <p>\r\n        This is a product demo for an upcoming app. Please do not share the link unless given express permission from the author.\r\n      </p>\r\n      <p>\r\n        Author: <a href=\"https://oliverfoster.co.uk/about\" target=\"_blank\">Oliver Foster</a><br />\r\n        Version: {settings.version}<br />\r\n        Update available: {Boolean(settings.needsUpdating) ? \"Yes\" : \"No\"}\r\n      </p>\r\n      <p>\r\n        Leave feedback or requests using the form at <a href=\"https://oliverfoster.co.uk/contact\" target=\"_blank\">oliverfoster.co.uk/contact</a>. Make sure to say that your message is regarding the <b>diabetes calculator</b>.\r\n      </p>\r\n      <p>\r\n        Copyright © 2021, Oliver Foster<br />\r\n      </p>\r\n    </div>\r\n  </section>\r\n\r\n}\r\n","import './App.css';\nimport { langs } from './lang/langs';\nimport React, { useEffect } from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  withRouter\n} from \"react-router-dom\";\nimport { allSettingsChanged } from './store/settings';\nimport clsx from 'clsx'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { InsulinUnits } from './InsulinUnits';\nimport { ProportionateCarbs } from './ProportionateCarbs';\nimport { Settings } from './Settings'\nimport { Warning } from './Warning'\nimport { About } from './About'\nimport { AppBar, List, IconButton, Toolbar, Divider, ListItem, ListItemIcon, ListItemText, Drawer, Typography } from '@material-ui/core'\nimport {\n  ChevronLeft as ChevronLeftIcon,\n  ChevronRight as ChevronRightIcon,\n  Menu as MenuIcon,\n  LocalHospitalOutlined as FoodInsulinIcon,\n  Settings as SettingsIcon,\n  SystemUpdate as SystemUpdateIcon,\n  Info as WarningIcon,\n  Help as AboutIcon,\n  Speed as ProportionateCarbsIcon\n} from '@material-ui/icons'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nconst drawerWidth = 'auto';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer - 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  menuButton: {\n    marginLeft: -20,\n    marginRight: 20,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(0) + 1,\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\n\n\nfunction ScrollToTop({ history }) {\n  useEffect(() => {\n    const unlisten = history.listen(() => {\n      window.scrollTo(0, 0);\n    });\n    return () => {\n      unlisten();\n    }\n  }, []);\n\n  return (null);\n}\n\nconst ScrollToTopConnected = withRouter(ScrollToTop);\n\nfunction App() {\n  const dispatch = useDispatch();\n  const view = useSelector(state => state.view)\n  const settings = useSelector(state => state.settings)\n  const lang = langs[settings.lang]\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    (async () => {\n      const response = await fetch('./manifest.json');\n      const manifest = await response.json();\n      console.log(`Installed: ${settings.version}, Manifest: ${manifest.version}`)\n      dispatch(allSettingsChanged({ needsUpdating: (manifest.version !== settings.version) }))\n    })();\n  })\n\n  return (\n    <Router>\n      <ScrollToTopConnected />\n      <div className=\"App\">\n        <AppBar\n          position=\"fixed\"\n          className={clsx(classes.appBar, {\n            [classes.appBarShift]: open,\n          })}\n        >\n          <Toolbar>\n\n            <Typography variant=\"h6\" noWrap>\n              <Route path=\"/insulinunits\"><FoodInsulinIcon /></Route>\n              <Route path=\"/proportionatecarbs\"><ProportionateCarbsIcon /></Route>\n              <Route path=\"/settings\"><SettingsIcon /></Route>\n              <Route path=\"/warning\"><WarningIcon /></Route>\n              <Route path=\"/about\"><AboutIcon /></Route>\n              &nbsp;{view.title}\n            </Typography>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              className={clsx(classes.menuButton, {\n                [classes.hide]: open,\n              })}\n            >\n              <MenuIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          variant=\"permanent\"\n          className={clsx(classes.drawer, {\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          })}\n          classes={{\n            paper: clsx({\n              [classes.drawerOpen]: open,\n              [classes.drawerClose]: !open,\n            }),\n          }}\n        >\n          <div className={classes.toolbar}>\n            <IconButton onClick={handleDrawerClose}>\n              {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n            </IconButton>\n          </div>\n          <Divider />\n          <List>\n            <ListItem button key='Insulin' component={Link} to=\"/insulinunits\" onClick={handleDrawerClose}>\n              <ListItemIcon><FoodInsulinIcon /></ListItemIcon>\n              <ListItemText primary={lang.insulinUnitsTitle} />\n            </ListItem>\n            <ListItem button key='Carbs' component={Link} to='/proportionatecarbs' onClick={handleDrawerClose}>\n              <ListItemIcon><ProportionateCarbsIcon /></ListItemIcon>\n              <ListItemText primary={lang.proportionateCarbsTitle} />\n            </ListItem>\n          </List>\n          <Divider />\n          <List>\n            <ListItem button key='Settings' component={Link} to='/settings' onClick={handleDrawerClose}>\n                <ListItemIcon><SettingsIcon /></ListItemIcon>\n                <ListItemText primary={'Settings'} />\n            </ListItem>\n            <ListItem button key='Warning' component={Link} to='/warning' onClick={handleDrawerClose}>\n                <ListItemIcon><WarningIcon /></ListItemIcon>\n                <ListItemText primary={'Warning'} />\n            </ListItem>\n            <ListItem button disabled={!settings.needsUpdating} key='Update' onClick={() => {\n              window.serviceWorkerRegistration.active.postMessage('update')\n            }}>\n                <ListItemIcon><SystemUpdateIcon /></ListItemIcon>\n                <ListItemText primary={'Update'} />\n            </ListItem>\n            <ListItem button key='About' component={Link} to='/about' onClick={handleDrawerClose}>\n                <ListItemIcon><AboutIcon /></ListItemIcon>\n                <ListItemText primary={'About'} />\n            </ListItem>\n          </List>\n        </Drawer>\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n          <Switch>\n            <Route path=\"/insulinunits\">\n              <InsulinUnits />\n            </Route>\n            <Route path=\"/proportionatecarbs\">\n              <ProportionateCarbs />\n            </Route>\n            <Route path=\"/settings\">\n              <Settings />\n            </Route>\n            <Route path=\"/warning\">\n              <Warning />\n            </Route>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Redirect to=\"/insulinunits\" />\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\n\nimport settingsReducer from './settings'\nimport insulinUnitsReducer from './insulinUnits'\nimport proportionateCarbsReducer from './proportionateCarbs'\nimport viewReducer from './view'\n\nexport default configureStore({\n  reducer: {\n    view: viewReducer,\n    settings: settingsReducer,\n    insulinUnits: insulinUnitsReducer,\n    proportionateCarbs: proportionateCarbsReducer\n  }\n})\n","// Register the service worker\r\nif ('serviceWorker' in navigator) {\r\n  // Wait for the 'load' event to not block other work\r\n  window.addEventListener('load', async () => {\r\n    // Try to register the service worker.\r\n    let registration;\r\n    try {\r\n      registration = await navigator.serviceWorker.register('./serviceWorker.js');\r\n      console.log('Service worker registered! 😎', registration);\r\n    } catch (err) {\r\n      console.log('😥 Service worker registration failed: ', err);\r\n      return;\r\n    }\r\n\r\n    navigator.serviceWorker.addEventListener('message', event => {\r\n      // event is a MessageEvent object\r\n      console.log(`The service worker sent me a message: ${event.data}`);\r\n      switch (event.data) {\r\n        case \"refresh\":\r\n          window.location.reload();\r\n          return;\r\n        default:\r\n          return;\r\n      }\r\n    });\r\n\r\n    navigator.serviceWorker.ready.then( registration => {\r\n      window.serviceWorkerRegistration = registration;\r\n      registration.active.postMessage(\"hi\");\r\n    });\r\n  });\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store/store'\nimport './manifest';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}