{"version":3,"sources":["store/initialState.js","store/view.js","utils/round.js","store/insulinUnits.js","utils/min.js","store/proportionateCarbs.js","utils/doStringMath.js","utils/mergeStates.js","utils/resetStates.js","utils/makeOnChanged.js","utils/makeOnBlur.js","utils/styles.js","InsulinUnits.js","ProportionateCarbs.js","store/settings.js","Settings.js","App.js","reportWebVitals.js","store/store.js","manifest.js","index.js"],"names":["addUI","settings","output","key","defaultSettings","consumedCarbs","currentBg","minimumUnits","carbsPerUnit","bgPerUnit","targetBg","unitAdjustmentPercentage","carbsPerColumnWeight","columnWeight","totalPacketWeight","totalPieces","consumedPieces","minimumCarbs","savedSettings","JSON","parse","localStorage","getItem","initialState","view","title","insulinUnits","ui_consumedCarbs","ui_currentBg","ui_unitAdjustmentPercentage","ui_minimumUnits","ui_carbsPerUnit","ui_bgPerUnit","ui_targetBg","ui_unitAdjustmentRatio","bgDistance","bgUnits","carbUnits","totalUnits","adjustedTotalUnits","roundedAdjustedTotalUnits","proportionateCarbs","ui_carbsPerColumnWeight","ui_columnWeight","ui_totalPacketWeight","ui_totalPieces","ui_consumedPieces","ui_minimumCarbs","carbRatio","totalPacketCarbs","carbsPerPiece","roundedConsumedCarbs","viewSlice","createSlice","name","reducers","titleChanged","state","action","payload","actions","round","value","precision","Math","valueAsString","String","includes","precisionAsString","precisionAfterDecimal","slice","indexOf","truncatedString","length","parseFloat","insulinUnitsSlice","allInsulinUnitsChanged","stateUpdate","Object","assign","unitAdjustmentRatio","min","doUnitMath","proportionateCarbsSlice","allProportionateCarbsChanged","doStringMath","str","replace","evaluate","mergeStates","update","merged","startsWith","err","fromKey","resetStates","makeOnChanged","dispatch","noui","event","target","makeOnBlur","defaults","screenContainer","maxWidth","margin","outputContainer","paddingBottom","inputGroup","paddingTop","inputContainer","display","input","fontSize","addCarbs","padding","minWidth","topButton","marginTop","width","rawStyles","makeStyles","InsulinUnits","useSelector","values","useDispatch","onChanged","onBlur","useEffect","className","style","Typography","variant","noWrap","Button","onClick","Autorenew","TextField","label","inputProps","onChange","bind","InputProps","startAdornment","InputAdornment","position","Restaurant","endAdornment","component","Link","to","Add","ShowChart","FitnessCenter","ProportionateCarbs","insulinUnitsState","Maximize","MenuOpen","Cake","RadioButtonUnchecked","DataUsage","settingsSlice","allSettingsChanged","setItem","stringify","Settings","drawerWidth","useStyles","theme","root","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","toolbar","alignItems","justifyContent","mixins","content","flexGrow","App","classes","useTheme","React","useState","open","setOpen","handleDrawerClose","AppBar","clsx","Toolbar","IconButton","color","aria-label","edge","Menu","Drawer","paper","direction","ChevronRight","ChevronLeft","Divider","List","ListItem","button","ListItemIcon","LocalHospitalOutlined","ListItemText","primary","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","viewReducer","settingsReducer","insulinUnitsReducer","proportionateCarbsReducer","a","fetch","response","json","manifest","validate","forEach","error","console","log","navigator","window","addEventListener","serviceWorker","register","reg","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.04477fce.chunk.js","sourcesContent":["function addUI(settings) {\n  if (!settings) return settings;\n  const output = {};\n  for (const key in settings) {\n    output[key] = settings[key]\n    output[`ui_${key}`] = settings[key]\n  }\n  return output\n}\n\nexport const defaultSettings = addUI({\n  consumedCarbs: 0,\n  currentBg: 5,\n  minimumUnits: 0.1,\n  carbsPerUnit: 0,\n  bgPerUnit: 0,\n  targetBg: 5,\n  unitAdjustmentPercentage: 0,\n  carbsPerColumnWeight: 0,\n  columnWeight: 100,\n  totalPacketWeight: 0,\n  totalPieces: 8,\n  consumedPieces: 8,\n  minimumCarbs: 0.1\n});\n\nconst savedSettings = addUI(JSON.parse(localStorage.getItem('settings') || 'null')) || {};\n\nfor (const key in defaultSettings) {\n  savedSettings[key] = savedSettings?.[key] ?? defaultSettings[key];\n}\n\nexport const initialState = {\n  view: {\n    title: ''\n  },\n  settings: savedSettings,\n  insulinUnits: {\n    consumedCarbs: null,\n    currentBg: null,\n    unitAdjustmentPercentage: null,\n    minimumUnits: null,\n    carbsPerUnit: null,\n    bgPerUnit: null,\n    targetBg: null,\n    ui_consumedCarbs: null,\n    ui_currentBg: null,\n    ui_unitAdjustmentPercentage: null,\n    ui_minimumUnits: null,\n    ui_carbsPerUnit: null,\n    ui_bgPerUnit: null,\n    ui_targetBg: null,\n    ui_unitAdjustmentRatio: 0,\n    bgDistance: 0,\n    bgUnits: 0,\n    carbUnits: 0,\n    totalUnits: 0,\n    adjustedTotalUnits: 0,\n    roundedAdjustedTotalUnits: 0\n  },\n  proportionateCarbs: {\n    carbsPerColumnWeight: null,\n    columnWeight: null,\n    totalPacketWeight: null,\n    totalPieces: null,\n    consumedPieces: null,\n    minimumCarbs: null,\n    ui_carbsPerColumnWeight: null,\n    ui_columnWeight: null,\n    ui_totalPacketWeight: null,\n    ui_totalPieces: null,\n    ui_consumedPieces: null,\n    ui_minimumCarbs: null,\n    carbRatio: 0,\n    totalPacketCarbs: 0,\n    carbsPerPiece: 0,\n    consumedCarbs: 0,\n    roundedConsumedCarbs: 0\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport { initialState } from './initialState'\n\nconst viewSlice = createSlice({\n  name: 'view',\n  initialState: initialState.view,\n  reducers: {\n    titleChanged(state, action) {\n      state.title = action.payload\n    }\n  }\n})\n\nexport const {\n  titleChanged\n} = viewSlice.actions\n\nexport default viewSlice.reducer\n","export default function round(value, precision) {\r\n  value = Math.round(value / precision) * precision\r\n  const valueAsString = String(value)\r\n  if (valueAsString.includes('.')) {\r\n    const precisionAsString = String(precision)\r\n    const precisionAfterDecimal = precisionAsString.slice(precisionAsString.indexOf('.') + 1)\r\n    const truncatedString = valueAsString.slice(0, valueAsString.indexOf('.') + 1 + precisionAfterDecimal.length)\r\n    return parseFloat(truncatedString)\r\n  }\r\n  return value\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\nimport round from '../utils/round'\nimport min from '../utils/min'\nimport { initialState } from './initialState'\n\nconst doUnitMath = (state, stateUpdate) => {\n  Object.assign(state, stateUpdate)\n\n  const consumedCarbs = state.consumedCarbs\n  const currentBg = state.currentBg\n  const unitAdjustmentPercentage = state.unitAdjustmentPercentage\n  const targetBg = state.targetBg\n  const carbsPerUnit = state.carbsPerUnit\n  const bgPerUnit = state.bgPerUnit\n  const minimumUnits = state.minimumUnits\n\n  const unitAdjustmentRatio = 1 + (unitAdjustmentPercentage / 100)\n  const bgDistance = (currentBg - targetBg)\n  const bgUnits = bgPerUnit ? (bgDistance / bgPerUnit) : 0\n  const carbUnits = carbsPerUnit ? (consumedCarbs / carbsPerUnit) : 0\n\n  const totalUnits = (bgUnits + carbUnits)\n  const adjustedTotalUnits = (totalUnits * unitAdjustmentRatio)\n  const roundedAdjustedTotalUnits = min(round(adjustedTotalUnits, minimumUnits))\n\n  Object.assign(state, {\n    unitAdjustmentRatio,\n    bgDistance,\n    bgUnits,\n    carbUnits,\n    totalUnits,\n    adjustedTotalUnits,\n    roundedAdjustedTotalUnits\n  })\n\n}\n\nconst insulinUnitsSlice = createSlice({\n  name: 'insulinUnits',\n  initialState: initialState.insulinUnits,\n  reducers: {\n    allInsulinUnitsChanged(state, action) {\n      doUnitMath(state, action.payload)\n    }\n  }\n})\n\nexport const {\n  allInsulinUnitsChanged\n} = insulinUnitsSlice.actions\n\nexport default insulinUnitsSlice.reducer\n","export default function min(value, min = 0) {\r\n  return value < min ? min : value;\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\nimport round from '../utils/round'\nimport { initialState } from './initialState'\n\nconst doUnitMath = (state, stateUpdate) => {\n  Object.assign(state, stateUpdate)\n\n  const carbsPerColumnWeight = state.carbsPerColumnWeight\n  const columnWeight = state.columnWeight\n  const totalPacketWeight = state.totalPacketWeight\n  const totalPieces = state.totalPieces\n  const consumedPieces = state.consumedPieces\n  const minimumCarbs = state.minimumCarbs\n\n  const carbRatio = columnWeight ? (carbsPerColumnWeight / columnWeight) : 0\n  const totalPacketCarbs = carbRatio * totalPacketWeight\n  const carbsPerPiece = totalPieces ? (totalPacketCarbs / totalPieces) : 0\n  const consumedCarbs = (carbsPerPiece * consumedPieces);\n\n  const roundedConsumedCarbs = round(consumedCarbs, minimumCarbs)\n\n  Object.assign(state, {\n    carbRatio,\n    totalPacketCarbs,\n    carbsPerPiece,\n    consumedCarbs,\n    roundedConsumedCarbs\n  })\n\n}\n\nconst proportionateCarbsSlice = createSlice({\n  name: 'proportionateCarbs',\n  initialState: initialState.proportionateCarbs,\n  reducers: {\n    allProportionateCarbsChanged(state, action) {\n      doUnitMath(state, action.payload)\n    }\n  }\n})\n\nexport const {\n  allProportionateCarbsChanged\n} = proportionateCarbsSlice.actions\n\nexport default proportionateCarbsSlice.reducer\n","import { evaluate } from 'mathjs'\n\nexport default function doStringMath(str) {\n  str = String(str)\n  str = str.replace(/x/i, '*')\n  return evaluate(str)\n}\n","import doStringMath from './doStringMath';\n\nexport default function mergeStates(state, settings, update = {}) {\n  state = {...state}\n  update = {...update}\n  const merged = {}\n  for (const key in update) {\n    // do math only on non ui values\n    try {\n      update[key] = key.startsWith('ui_') ? update[key] : doStringMath(update[key])\n    } catch (err) {\n      // Ignore mid-math errors\n      delete update[key]\n    }\n  }\n  for (const key in update) {\n    const fromKey = key.startsWith('ui_') ? key.slice(3) : key;\n    // if updated value matches settings then remove\n    if (update[key] === settings[fromKey]) {\n      update[key] = null;\n      state[key] = null;\n      merged[key] = null;\n    }\n  }\n  for (const key in state) {\n    const fromKey = key.startsWith('ui_') ? key.slice(3) : key;\n    // output final value filling in defaults\n    merged[key] = update[key] ?? state[key] ?? settings[fromKey]\n  }\n  return merged\n}\n","import doStringMath from './doStringMath';\r\n\r\nexport default function resetStates(state, settings) {\r\n  state = {...state}\r\n  const update = {};\r\n  for (const key in state) {\r\n    if (!key.startsWith('ui_')) continue;\r\n    const fromKey = key.slice(3)\r\n    update[key] = settings[fromKey]\r\n    update[fromKey] = settings[fromKey]\r\n  }\r\n  const merged = {}\r\n  for (const key in update) {\r\n    // do math only on non ui values\r\n    try {\r\n      update[key] = key.startsWith('ui_') ? update[key] : doStringMath(update[key])\r\n    } catch (err) {\r\n      // Ignore mid-math errors\r\n      delete update[key]\r\n    }\r\n  }\r\n  for (const key in update) {\r\n    const fromKey = key.startsWith('ui_') ? key.slice(3) : key;\r\n    // if updated value matches settings then remove\r\n    if (update[key] === settings[fromKey]) {\r\n      update[key] = null;\r\n      state[key] = null;\r\n      merged[key] = null;\r\n    }\r\n  }\r\n  for (const key in state) {\r\n    const fromKey = key.startsWith('ui_') ? key.slice(3) : key;\r\n    // output final value filling in defaults\r\n    merged[key] = update[key] ?? state[key] ?? settings[fromKey]\r\n  }\r\n  return merged\r\n}\r\n","import mergeStates from \"./mergeStates\"\n\nexport default function makeOnChanged(state, settings, dispatch, action, { noui = false } = {}) {\n  return (name, event) => {\n    const value = event.target.value\n    try {\n      dispatch(\n        action(mergeStates(\n          state,\n          settings,\n          noui\n          ? {\n            [name]: value || settings[name]\n          }\n          : {\n            [name]: value || settings[name],\n            [`ui_${name}`]: value\n          }\n        ))\n      )\n    } catch (err) {}\n  }\n}\n","export default function makeOnBlur(defaults, dispatch, action, { noui = false } = {}) {\n  return (name, event) => {\n    const value = event.target.value\n    if (value !== \"\") return;\n    dispatch(\n      action(\n        noui\n        ? {\n          [name]: defaults[name],\n        }\n        : {\n          [name]: defaults[name],\n          [`ui_${name}`]: defaults[name]\n        }\n      )\n    )\n  }\n}\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst screenContainer = {\n  maxWidth: '400px',\n  margin: 'auto'\n}\n\nconst outputContainer = {\n  paddingBottom: '1em'\n}\n\nconst inputGroup = {\n  paddingTop: '1em'\n}\n\nconst inputContainer = {\n  display: 'flex',\n  paddingBottom: '2rem'\n}\n\nconst input = {\n  display: 'inline-flex',\n  fontSize: '2rem'\n}\n\nconst addCarbs = {\n  display: 'inline-flex',\n  padding: '6px 0px',\n  minWidth: '32px'\n}\n\nconst topButton = {\n  marginTop: '0em',\n  width: '100%'\n}\n\nconst rawStyles = {\n  input,\n  inputGroup,\n  addCarbs,\n  inputContainer,\n  outputContainer,\n  screenContainer,\n  topButton\n};\n\nconst styles = makeStyles(rawStyles);\n\nexport default styles\n\nexport {\n  input,\n  inputGroup,\n  addCarbs,\n  inputContainer,\n  outputContainer,\n  screenContainer,\n  topButton\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  Link\n} from \"react-router-dom\";\nimport { TextField, Typography, InputAdornment, Button } from '@material-ui/core';\nimport { titleChanged } from './store/view';\nimport { allInsulinUnitsChanged } from './store/insulinUnits'\nimport { allProportionateCarbsChanged } from './store/proportionateCarbs'\nimport mergeStates from './utils/mergeStates'\nimport resetStates from './utils/resetStates';\nimport makeOnChanged from './utils/makeOnChanged';\nimport makeOnBlur from './utils/makeOnBlur'\nimport {\n  screenContainer,\n  outputContainer,\n  inputGroup,\n  inputContainer,\n  input,\n  addCarbs,\n  topButton\n} from './utils/styles';\nimport {\n  Restaurant as RestaurantIcon,\n  ShowChart as ShowChartIcon,\n  FitnessCenter as FitnessCenterIcon,\n  Settings as SettingsIcon,\n  Add as AddIcon,\n  Autorenew as AutorenewIcon\n} from '@material-ui/icons'\n\nexport const InsulinUnits = () => {\n  // const proportionateCarbsState = useSelector(state => state.proportionateCarbs)\n  const state = useSelector(state => state.insulinUnits)\n  const settings = useSelector(state => state.settings)\n  const values = mergeStates(state, settings)\n  const dispatch = useDispatch()\n  const onChanged = makeOnChanged(state, settings, dispatch, allInsulinUnitsChanged)\n  const onBlur = makeOnBlur(settings, dispatch, allInsulinUnitsChanged)\n\n  useEffect(() => {\n    dispatch(\n      titleChanged('Insulin')\n    )\n  })\n\n  return (\n    <section className=\"insulinunits\" style={screenContainer}>\n\n      <div className=\"insulinunits__output\" style={outputContainer}>\n        <Typography variant=\"h2\" noWrap>\n          {state.roundedAdjustedTotalUnits||0}units\n        </Typography>\n      </div>\n\n      <div className=\"insulinunits__button__reset\">\n        <Button\n          style={topButton}\n          onClick={\n            () => {\n              dispatch(allInsulinUnitsChanged(resetStates(\n                state,\n                settings\n              )))\n            }\n          }\n        >\n          <AutorenewIcon />\n          &nbsp;Reset\n        </Button>\n      </div>\n\n      <div className=\"insulinunits_input\" style={inputGroup}>\n\n        <div className=\"insulinunits__input__consumedcarbs\" style={inputContainer}>\n          <TextField label=\"Consumed carbohydrates\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'consumedCarbs')}\n            onBlur={onBlur.bind(this, 'consumedCarbs')}\n            value={values.ui_consumedCarbs}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><RestaurantIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">{state.consumedCarbs||0}g</InputAdornment>,\n            }}\n          />\n          <Button\n            style={addCarbs}\n            component={Link} to=\"/proportionatecarbs\"\n            onClick={\n              () => {\n                // Reset proportionatecarbsui\n                // dispatch(allProportionateCarbsChanged(resetStates(\n                //   proportionateCarbsState,\n                //   settings\n                // )))\n              }\n            }\n          >\n            <AddIcon />\n          </Button>\n        </div>\n\n        <div className=\"insulinunits__input__currentbg\" style={inputContainer}>\n          <TextField label=\"Current blood glucose\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'currentBg')}\n            onBlur={onBlur.bind(this, 'currentBg')}\n            value={values.ui_currentBg}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><ShowChartIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">mmol/l</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"insulinunits__input__unitadjustmentpercentage\" style={inputContainer}>\n          <TextField label=\"Adjustment\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'unitAdjustmentPercentage')}\n            onBlur={onBlur.bind(this, 'unitAdjustmentPercentage')}\n            value={values.ui_unitAdjustmentPercentage}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><FitnessCenterIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"insulinunits__input__targetbg\" style={inputContainer}>\n          <TextField label=\"Target blood glucose\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'targetBg')}\n            onBlur={onBlur.bind(this, 'targetBg')}\n            value={values.ui_targetBg}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">mmol/l</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"insulinunits__input__carbsperunit\" style={inputContainer}>\n          <TextField label=\"Carbs per unit\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'carbsPerUnit')}\n            onBlur={onBlur.bind(this, 'carbsPerUnit')}\n            value={values.ui_carbsPerUnit}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">g</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"insulinunits__input__bgperunit\" style={inputContainer}>\n          <TextField label=\"Blood glucose correction per unit\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'bgPerUnit')}\n            onBlur={onBlur.bind(this, 'bgPerUnit')}\n            value={values.ui_bgPerUnit}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">mmol/l</InputAdornment>,\n            }}\n          />\n        </div>\n\n      </div>\n\n    </section>\n  )\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  Link\n} from \"react-router-dom\";\nimport { Typography, TextField, InputAdornment, Button } from '@material-ui/core'\nimport { titleChanged } from './store/view';\nimport { allInsulinUnitsChanged } from './store/insulinUnits';\nimport { allProportionateCarbsChanged } from './store/proportionateCarbs'\nimport mergeStates from './utils/mergeStates'\nimport makeOnChanged from './utils/makeOnChanged';\nimport makeOnBlur from './utils/makeOnBlur'\nimport {\n  screenContainer,\n  outputContainer,\n  topButton,\n  inputGroup,\n  inputContainer,\n  input\n} from './utils/styles';\nimport {\n  Maximize as MaximizeIcon,\n  MenuOpen as MenuOpenIcon,\n  RadioButtonUnchecked as RadioButtonUncheckedIcon,\n  Cake as CakeIcon,\n  DataUsage as DataUsageIcon,\n  Add as AddIcon,\n  Autorenew as AutorenewIcon\n} from '@material-ui/icons'\nimport resetStates from './utils/resetStates';\n\nexport const ProportionateCarbs = () => {\n  const insulinUnitsState = useSelector(state => state.insulinUnits)\n  const state = useSelector(state => state.proportionateCarbs)\n  const settings = useSelector(state => state.settings)\n  const values = mergeStates(state, settings)\n  const dispatch = useDispatch()\n  const onChanged = makeOnChanged(state, settings, dispatch, allProportionateCarbsChanged)\n  const onBlur = makeOnBlur(settings, dispatch, allProportionateCarbsChanged)\n\n  useEffect(() => {\n    dispatch(\n      titleChanged('Carbohydrates')\n    )\n  })\n\n  return (\n    <section className=\"proportionatecarbs\" style={screenContainer}>\n\n      <div className=\"proportionatecarbs__output\" style={outputContainer}>\n        <Typography variant=\"h2\" noWrap>\n          {state.roundedConsumedCarbs||0}g\n        </Typography>\n      </div>\n\n      <div className=\"proportionatecarbs__button__addtoinsulin\">\n        <Button\n          style={topButton}\n          component={Link} to=\"/insulinunits\"\n          onClick={\n            () => {\n              const value = parseFloat(insulinUnitsState.ui_consumedCarbs)\n                ? `${insulinUnitsState.ui_consumedCarbs}+${state.roundedConsumedCarbs||0}`\n                : `${state.roundedConsumedCarbs||0}`\n              dispatch(allInsulinUnitsChanged(mergeStates(\n                insulinUnitsState,\n                settings,\n                {\n                  'consumedCarbs': value,\n                  'ui_consumedCarbs': value\n                }\n              )))\n            }\n          }\n        >\n          <AddIcon />\n          &nbsp;Add to insulin calculator\n        </Button>\n      </div>\n\n      <div className=\"proportionatecarbs__button__reset\">\n        <Button\n          style={topButton}\n          onClick={\n            () => {\n              dispatch(allProportionateCarbsChanged(resetStates(\n                state,\n                settings\n              )))\n            }\n          }\n        >\n          <AutorenewIcon />\n          &nbsp;Reset\n        </Button>\n      </div>\n\n      <div className=\"proportionatecarbs_input\" style={inputGroup}>\n\n        <div className=\"proportionatecarbs__input__columnweight\" style={inputContainer}>\n          <TextField label=\"Per weight\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'columnWeight')}\n            onBlur={onBlur.bind(this, 'columnWeight')}\n            value={values.ui_columnWeight}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><MaximizeIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">g</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"proportionatecarbs__input__carbspercolumnweight\" style={inputContainer}>\n          <TextField label=\"Carbs per weight\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'carbsPerColumnWeight')}\n            onBlur={onBlur.bind(this, 'carbsPerColumnWeight')}\n            value={values.ui_carbsPerColumnWeight}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><MenuOpenIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">g</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"proportionatecarbs__input__totalpacketweight\" style={inputContainer}>\n          <TextField label=\"Total (net) weight\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'totalPacketWeight')}\n            onBlur={onBlur.bind(this, 'totalPacketWeight')}\n            value={values.ui_totalPacketWeight}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><CakeIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">g</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"proportionatecarbs__input__totalpieces\" style={inputContainer}>\n          <TextField label=\"Total pieces\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'totalPieces')}\n            onBlur={onBlur.bind(this, 'totalPieces')}\n            value={values.ui_totalPieces}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><RadioButtonUncheckedIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">{values.ui_consumedPieces}/{values.ui_totalPieces}</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"proportionatecarbs__input__consumedpieces\" style={inputContainer}>\n          <TextField label=\"Consumed pieces\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'consumedPieces')}\n            onBlur={onBlur.bind(this, 'consumedPieces')}\n            value={values.ui_consumedPieces}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><DataUsageIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">{values.ui_consumedPieces}/{values.ui_totalPieces}</InputAdornment>,\n            }}\n          />\n        </div>\n\n      </div>\n\n    </section>\n  )\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport { initialState } from './initialState'\n\nconst settingsSlice = createSlice({\n  name: 'settings',\n  initialState: initialState.settings,\n  reducers: {\n    allSettingsChanged(state, action) {\n      Object.assign(state, action.payload)\n      localStorage.setItem('settings', JSON.stringify(state, null, 2))\n    }\n  }\n})\n\nexport const {\n  allSettingsChanged\n} = settingsSlice.actions\n\nexport default settingsSlice.reducer\n","import React, { useEffect } from 'react';\nimport { defaultSettings } from './store/initialState';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { TextField, InputAdornment, } from '@material-ui/core';\nimport { titleChanged } from './store/view';\nimport { allSettingsChanged } from './store/settings'\nimport makeOnChanged from './utils/makeOnChanged';\nimport makeOnBlur from './utils/makeOnBlur'\nimport {\n  screenContainer,\n  input,\n  inputContainer\n} from './utils/styles';\nimport {\n  LocalHospitalOutlined as LocalHospitalOutlinedIcon,\n  Restaurant as RestaurantIcon,\n  ShowChart as ShowChartIcon,\n  FitnessCenter as FitnessCenterIcon,\n  Settings as SettingsIcon,\n  RadioButtonUnchecked as RadioButtonUncheckedIcon,\n  Cake as CakeIcon,\n  DataUsage as DataUsageIcon,\n} from '@material-ui/icons'\n\nexport const Settings = () => {\n  const settings = useSelector(state => state.settings)\n  const dispatch = useDispatch()\n  const onChanged = makeOnChanged(settings, defaultSettings, dispatch, allSettingsChanged, { noui: false })\n  const onBlur = makeOnBlur(defaultSettings, dispatch, allSettingsChanged, { noui: false })\n\n  useEffect(() => {\n    dispatch(\n      titleChanged('Settings')\n    )\n  })\n\n  return (\n    <section className=\"settings\" style={screenContainer}>\n\n      <div className=\"settings_input\">\n\n        <div className=\"settings__input__currentbg\" style={inputContainer}>\n          <TextField label=\"Default current blood glucose\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'currentBg')}\n            onBlur={onBlur.bind(this, 'currentBg')}\n            value={settings.ui_currentBg}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><ShowChartIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">mmol/l</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"settings__input__targetbg\" style={inputContainer}>\n          <TextField label=\"Default target blood glucose\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'targetBg')}\n            onBlur={onBlur.bind(this, 'targetBg')}\n            value={settings.ui_targetBg}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">mmol/l</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"settings__input__unitadjustmentpercentage\" style={inputContainer}>\n          <TextField label=\"Default adjustment\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'unitAdjustmentPercentage')}\n            onBlur={onBlur.bind(this, 'unitAdjustmentPercentage')}\n            value={settings.ui_unitAdjustmentPercentage}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><FitnessCenterIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"settings__input__carbsperunit\" style={inputContainer}>\n          <TextField label=\"Default carbs per unit\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'carbsPerUnit')}\n            onBlur={onBlur.bind(this, 'carbsPerUnit')}\n            value={settings.ui_carbsPerUnit}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">g</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"settings__input__bgperunit\" style={inputContainer}>\n          <TextField label=\"Default blood glucose correction per unit\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'bgPerUnit')}\n            onBlur={onBlur.bind(this, 'bgPerUnit')}\n            value={settings.ui_bgPerUnit}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">mmol/l</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"settings__input__totalpieces\" style={inputContainer}>\n          <TextField label=\"Default total pieces\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'totalPieces')}\n            onBlur={onBlur.bind(this, 'totalPieces')}\n            value={settings.ui_totalPieces}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><RadioButtonUncheckedIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">{settings.consumedPieces}/{settings.totalPieces}</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"settings__input__consumedpieces\" style={inputContainer}>\n          <TextField label=\"Default consumed pieces\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'consumedPieces')}\n            onBlur={onBlur.bind(this, 'consumedPieces')}\n            value={settings.ui_consumedPieces}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><DataUsageIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">{settings.consumedPieces}/{settings.totalPieces}</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"settings__input__minimumcarbs\" style={inputContainer}>\n          <TextField label=\"Minimum carbs\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'minimumCarbs')}\n            onBlur={onBlur.bind(this, 'minimumCarbs')}\n            value={settings.ui_minimumCarbs}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">g</InputAdornment>,\n            }}\n          />\n        </div>\n\n        <div className=\"settings__input__minimumunits\" style={inputContainer}>\n          <TextField label=\"Minimum units\"\n            inputProps={{style: input}}\n            onChange={onChanged.bind(this, 'minimumUnits')}\n            onBlur={onBlur.bind(this, 'minimumUnits')}\n            value={settings.ui_minimumUnits}\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\"><SettingsIcon /></InputAdornment>,\n              endAdornment: <InputAdornment position=\"end\">unit</InputAdornment>,\n            }}\n          />\n        </div>\n\n\n      </div>\n\n    </section>\n  )\n}\n","import './App.css';\nimport React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\nimport clsx from 'clsx'\nimport { useSelector } from 'react-redux';\nimport { InsulinUnits } from './InsulinUnits';\nimport { ProportionateCarbs } from './ProportionateCarbs';\nimport { Settings } from './Settings'\nimport { AppBar, List, IconButton, Toolbar, Divider, ListItem, ListItemIcon, ListItemText, Drawer, Typography } from '@material-ui/core'\nimport {\n  ChevronLeft as ChevronLeftIcon,\n  ChevronRight as ChevronRightIcon,\n  Menu as MenuIcon,\n  LocalHospitalOutlined as LocalHospitalOutlinedIcon,\n  Restaurant as RestaurantIcon,\n  Settings as SettingsIcon\n} from '@material-ui/icons'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nconst drawerWidth = 160;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginLeft: -20,\n    marginRight: 20,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(0) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(7) + 1,\n    },\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction App() {\n  const view = useSelector(state => state.view)\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <AppBar\n          position=\"fixed\"\n          className={clsx(classes.appBar, {\n            [classes.appBarShift]: open,\n          })}\n        >\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              className={clsx(classes.menuButton, {\n                [classes.hide]: open,\n              })}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" noWrap>\n              {view.title}\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          variant=\"permanent\"\n          className={clsx(classes.drawer, {\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          })}\n          classes={{\n            paper: clsx({\n              [classes.drawerOpen]: open,\n              [classes.drawerClose]: !open,\n            }),\n          }}\n        >\n          <div className={classes.toolbar}>\n            <IconButton onClick={handleDrawerClose}>\n              {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n            </IconButton>\n          </div>\n          <Divider />\n          <List>\n            <ListItem button key='Insulin' component={Link} to=\"/insulinunits\" onClick={handleDrawerClose}>\n              <ListItemIcon><LocalHospitalOutlinedIcon /></ListItemIcon>\n              <ListItemText primary={'Insulin'} />\n            </ListItem>\n            <ListItem button key='Carbs' component={Link} to='/proportionatecarbs' onClick={handleDrawerClose}>\n              <ListItemIcon><RestaurantIcon /></ListItemIcon>\n              <ListItemText primary={'Carbs'} />\n            </ListItem>\n          </List>\n          <Divider />\n          <List>\n            <ListItem button key='Settings' component={Link} to='/settings' onClick={handleDrawerClose}>\n                <ListItemIcon><SettingsIcon /></ListItemIcon>\n                <ListItemText primary={'Settings'} />\n            </ListItem>\n          </List>\n        </Drawer>\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n          <Switch>\n            <Route path=\"/insulinunits\">\n              <InsulinUnits />\n            </Route>\n            <Route path=\"/proportionatecarbs\">\n              <ProportionateCarbs />\n            </Route>\n            <Route path=\"/settings\">\n              <Settings />\n            </Route>\n            <Redirect to=\"/insulinunits\" />\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\n\nimport settingsReducer from './settings'\nimport insulinUnitsReducer from './insulinUnits'\nimport proportionateCarbsReducer from './proportionateCarbs'\nimport viewReducer from './view'\n\nexport default configureStore({\n  reducer: {\n    view: viewReducer,\n    settings: settingsReducer,\n    insulinUnits: insulinUnitsReducer,\n    proportionateCarbs: proportionateCarbsReducer\n  }\n})\n","import validate from 'web-app-manifest-validator'\r\n\r\n(async () => {\r\n\r\n  const response = await fetch('./manifest.json');\r\n  const manifest = await response.json();\r\n\r\n  validate(manifest).forEach(function(error) {\r\n    console.log(error);\r\n  });\r\n\r\n})();\r\n\r\n// Register the service worker\r\nif ('serviceWorker' in navigator) {\r\n  // Wait for the 'load' event to not block other work\r\n  window.addEventListener('load', async () => {\r\n    // Try to register the service worker.\r\n    try {\r\n      const reg = await navigator.serviceWorker.register('./serviceWorker.js');\r\n      console.log('Service worker registered! 😎', reg);\r\n    } catch (err) {\r\n      console.log('😥 Service worker registration failed: ', err);\r\n      return;\r\n    }\r\n  });\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store/store'\nimport './manifest';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}